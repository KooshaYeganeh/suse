#!/bin/bash

# Leap

leap152=`cat /etc/os-release | grep "suse" | grep leap | grep -o 15.2`
leap153=`cat /etc/os-release | grep "suse" | grep leap | grep -o 15.3`
leap154=`cat /etc/os-release | grep "suse" | grep leap | grep -o 15.4`
leap155=`cat /etc/os-release | grep "suse" | grep leap | grep -o 15.5`

# Tumbleweed

Tumbleweed=`cat /etc/os-release | grep "suse" | grep leap | grep -o Tumbleweed`
tumbleweed=`cat /etc/os-release | grep "suse" | grep leap | grep -o tumbleweed`


green=$(tput setaf 6)
yellow=$(tput setaf 3)
red=$(tput setaf 1)
reset=`tput sgr0`



android_tools_repo(){


	if [ "$Tumbleweed" == "Tumbleweed" ] || [ "$tumbleweed" == "tumbleweed" ];then

		echo -e "\n $green =============== openSUSE Tumbleweed  =============== $reset \n"
		echo -e "$yellow Repository Name : android-tools from home:GNorth project $reset"
		
		echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:GNorth/openSUSE_Tumbleweed/home:GNorth.repo"

		echo "$yellow =============== Repository Name : android-tools from home:ahjolinna project ===============  $reset"

		echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:ahjolinna/openSUSE_Tumbleweed/home:ahjolinna.repo"

	
		echo "$yellow =============== Repository Name : android-tools from home:mrbadguy project ===============  $reset"

		echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:mrbadguy/openSUSE_Tumbleweed/home:mrbadguy.repo"




	elif [ "$leap152" == "15.2" ];then

		echo -e "$green =============== openSUSE Leap 15.2 =============== $reset \n"
		echo -e "$yellow Repository Name : android-tools from home:AndnoVember:test project $reset"

		echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:AndnoVember:test/openSUSE_Leap_15.2/home:AndnoVember:test.repo"

	elif [ "$leap153" == "15.3" ];then

		echo -e "$reset =============== openSUSE Leap 15.3 =============== $green \n"
		
		echo -e "$yellow Repository Name : android-tools from home:AndnoVember:test project $reset"
		
		echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:AndnoVember:test/openSUSE_Leap_15.3/home:AndnoVember:test.repo"
		
		echo -e "$yellow Repository Name : android-tools from home:embar-:Lietukas project $reset"

		echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:embar-:Lietukas/openSUSE_Leap_15.3/home:embar-:Lietukas.repo"
		

	elif [ "$leap154" == "15.4" ];then

		echo -e "$green =============== openSUSE Leap 15.4 =============== $reset \n"
		
		echo -e "$yellow Repository Name : android-tools from home:AndnoVember:test project $reset"
		echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:AndnoVember:test/15.4/home:AndnoVember:test.repo"

		echo -e "$yellow Repository Name : android-tools from home:GNorth project $reset"
		echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:GNorth/15.4/home:GNorth.repo"

		echo -e "$yellow Repository Name : https://build.opensuse.org/project/show/home:Herbster0815  $reset"

		echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:Herbster0815/openSUSE_Leap_15.4/home:Herbster0815.repo"

		echo "sudo zypper refresh"
		echo "sudo zypper install android-tools"

		echo -e "$yellow Repository Name : android-tools from home:ahjolinna project $reset"

		echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:ahjolinna/15.4/home:ahjolinna.repo"

		echo -e "$yellow Repository Name : android-tools from home:mrbadguy project $reset"
		echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:mrbadguy/openSUSE_Leap_15.4/home:mrbadguy.repo"



	elif [ "$leap155" == "15.5" ];then
		echo -e "$green =============== openSUSE Leap 15.5 =============== $reset \n"
		
		echo -e "$yellow Repository Name : android-tools from home:AndnoVember:test project $reset"
		echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:AndnoVember:test/15.5/home:AndnoVember:test.repo"
		


		echo -e "$yellow Repository Name : android-tools from home:Herbster0815 project $reset"
		
		echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:Herbster0815/openSUSE_Leap_15.5/home:Herbster0815.repo"


	fi
}



# Android Tools Application  Install procedure Just Developed For 
# openusse Leap 15.3
# if You want to Develope for Your Own System
# You should Add New Function For application procedure Functions

android_tools_app(){

	echo "$yellow android-tools $reset"
	echo "$yellow Android platform tools $reset"
	echo -e "\n $green INFO : Android SDK Platform-Tools is a component for the Android SDK. It includes tools that interface with the Android platform.\n $reset"
	echo "=============== Leap 15.3 ================="

	echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:cabelo:innovators/15.3/home:cabelo:innovators.repo"
	echo "$yellow or $reset"
	echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:embar-:Lietukas/openSUSE_Leap_15.3/home:embar-:Lietukas.repo"
	echo "sudo zypper refresh"
	echo "sudo zypper install android-tools"


}



android_debug_bridge(){

	echo "Start Install $yellow Android Tools(ADB) $reset Please Wait ... "

	if [ "$Tumbleweed" == "Tumbleweed" ] || [ "$tumbleweed" == "tumbleweed" ];then

		echo -e "\n $green =============== openSUSE Tumbleweed  =============== $reset \n"
		echo -e "$yellow Repository Name : android-tools from home:GNorth project $reset"
		
		echo "$yellow I Add 3 Repository For opensuse Tumbleweed.If you do not receive a response from the server, delete the repository $reset"

		sudo zypper addrepo https://download.opensuse.org/repositories/home:GNorth/openSUSE_Tumbleweed/home:GNorth.repo

		echo "$yellow =============== Repository Name : android-tools from home:ahjolinna project ===============  $reset"

		sudo zypper addrepo https://download.opensuse.org/repositories/home:ahjolinna/openSUSE_Tumbleweed/home:ahjolinna.repo

	
		echo "$yellow =============== Repository Name : android-tools from home:mrbadguy project ===============  $reset"

		sudo zypper addrepo https://download.opensuse.org/repositories/home:mrbadguy/openSUSE_Tumbleweed/home:mrbadguy.repo


		sudo zypper refresh
		sudo zypper install android-tools

	elif [ "$leap152" == "15.2" ];then

		echo -e "$green =============== openSUSE Leap 15.2 =============== $reset \n"
		echo -e "$yellow Repository Name : android-tools from home:AndnoVember:test project $reset"

		sudo zypper addrepo https://download.opensuse.org/repositories/home:AndnoVember:test/openSUSE_Leap_15.2/home:AndnoVember:test.repo

		sudo zypper refresh
		sudo zypper install android-tools


	elif [ "$leap153" == "15.3" ];then

		echo -e "$reset =============== openSUSE Leap 15.3 =============== $green \n"
		echo "$yellow I Add 2 Repository For opensuse Tumbleweed.If you do not receive a response from the server, delete the repository $reset"
		echo ""
		echo -e "$yellow Repository Name : android-tools from home:AndnoVember:test project $reset"
		
		sudo zypper addrepo https://download.opensuse.org/repositories/home:AndnoVember:test/openSUSE_Leap_15.3/home:AndnoVember:test.repo
		
		echo -e "$yellow Repository Name : android-tools from home:embar-:Lietukas project $reset"

		sudo zypper addrepo https://download.opensuse.org/repositories/home:embar-:Lietukas/openSUSE_Leap_15.3/home:embar-:Lietukas.repo
		
		sudo zypper refresh
		sudo zypper install android-tools


	elif [ "$leap154" == "15.4" ];then

		echo -e "$green =============== openSUSE Leap 15.4 =============== $reset \n"
		echo "$yellow I Add 2 Repository For opensuse Tumbleweed.If you do not receive a response from the server, delete the repository $reset"
		echo ""
		echo -e "$yellow Repository Name : android-tools from home:AndnoVember:test project $reset"
		sudo zypper addrepo https://download.opensuse.org/repositories/home:AndnoVember:test/15.4/home:AndnoVember:test.repo

		echo -e "$yellow Repository Name : android-tools from home:GNorth project $reset"
		sudo zypper addrepo https://download.opensuse.org/repositories/home:GNorth/15.4/home:GNorth.repo

		echo -e "$yellow Repository Name : https://build.opensuse.org/project/show/home:Herbster0815  $reset"

		sudo zypper addrepo https://download.opensuse.org/repositories/home:Herbster0815/openSUSE_Leap_15.4/home:Herbster0815.repo

		echo -e "$yellow Repository Name : android-tools from home:ahjolinna project $reset"

		sudo zypper addrepo https://download.opensuse.org/repositories/home:ahjolinna/15.4/home:ahjolinna.repo

		echo -e "$yellow Repository Name : android-tools from home:mrbadguy project $reset"
		sudo zypper addrepo https://download.opensuse.org/repositories/home:mrbadguy/openSUSE_Leap_15.4/home:mrbadguy.repo

		sudo zypper refresh
		sudo zypper install android-tools

	elif [ "$leap155" == "15.5" ];then
		echo -e "$green =============== openSUSE Leap 15.5 =============== $reset \n"

		echo "$yellow I Add 2 Repository For opensuse Tumbleweed.If you do not receive a response from the server, delete the repository $reset"

		echo ""
		
		echo -e "$yellow Repository Name : android-tools from home:AndnoVember:test project $reset"
		sudo zypper addrepo https://download.opensuse.org/repositories/home:AndnoVember:test/15.5/home:AndnoVember:test.repo
		


		echo -e "$yellow Repository Name : android-tools from home:Herbster0815 project $reset"
		
		sudo zypper addrepo https://download.opensuse.org/repositories/home:Herbster0815/openSUSE_Leap_15.5/home:Herbster0815.repo


		sudo zypper refresh
		sudo zypper install android-tools
	fi


}








vlc_repo(){


	if [ "$leap153" == "15.3" ];then
		echo "=============== Leap 15.3 ================="

		echo "sudo zypper addrepo https://download.opensuse.org/repositories/openSUSE:Leap:15.3:Update/standard/openSUSE:Leap:15.3:Update.repo"
	elif [ "$leap154" == "15.4" ];then
		echo "=============== Leap 15.3 ================="
		echo "zypper addrepo https://download.opensuse.org/repositories/home:worldcitizen:GoldenCheetah/15.4/home:worldcitizen:GoldenCheetah.repo"
		echo "zypper addrepo https://download.opensuse.org/repositories/openSUSE:Leap:15.4:Update/standard/openSUSE:Leap:15.4:Update.repo"
	elif [ "$leap152" == "15.2" ];then
		echo "sudo zypper addrepo https://download.opensuse.org/repositories/openSUSE:Leap:15.2:Update/standard/openSUSE:Leap:15.2:Update.repo"
	elif [ "$Tumbleweed" == "Tumbleweed" ] || [ "$tumbleweed" == "tumbleweed" ];then
		echo "=============== Tumbleweed ================="
		echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:StefanBruens:branches:multimedia:libs/openSUSE_Tumbleweed/home:StefanBruens:branches:multimedia:libs.repo"
	fi
}


vlc_app(){

	if [ "$leap153" == "15.3" ];then
		echo "=============== Leap 15.3 ================="

		echo "sudo zypper addrepo https://download.opensuse.org/repositories/openSUSE:Leap:15.3:Update/standard/openSUSE:Leap:15.3:Update.repo"
		echo "sudo zypper refresh"
		echo "sudo zypper install vlc"
	elif [ "$leap154" == "15.4" ];then
		echo "=============== Leap 15.4 ================="
		echo "zypper addrepo https://download.opensuse.org/repositories/home:worldcitizen:GoldenCheetah/15.4/home:worldcitizen:GoldenCheetah.repo"
		echo "zypper addrepo https://download.opensuse.org/repositories/openSUSE:Leap:15.4:Update/standard/openSUSE:Leap:15.4:Update.repo"
		echo "sudo zypper refresh"
		echo "sudo zypper install vlc"
	elif [ "$leap152" == "15.2" ];then
		echo "=============== Leap 15.2 ================="
		echo "sudo zypper addrepo https://download.opensuse.org/repositories/openSUSE:Leap:15.2:Update/standard/openSUSE:Leap:15.2:Update.repo"
		echo "sudo zypper refresh"
		echo "sudo zypper install vlc"

	elif [ "$Tumbleweed" == "Tumbleweed" ] || [ "$umbleweed" == "tumbleweed" ];then
		echo "=============== Tumbleweed ================="
		echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:StefanBruens:branches:multimedia:libs/openSUSE_Tumbleweed/home:StefanBruens:branches:multimedia:libs.repo"
		echo "sudo zypper refresh"
		echo "sudo zypper install vlc"
	fi



}








vlc(){

	echo "Start Install $yellow vlc $reset Please Wait ... "
	
	if [ "$leap153" == "15.3" ];then
		echo "=============== Leap 15.3 ================="

		sudo zypper addrepo https://download.opensuse.org/repositories/openSUSE:Leap:15.3:Update/standard/openSUSE:Leap:15.3:Update.repo
		sudo zypper refresh
		sudo zypper install vlc
	elif [ "$leap154" == "15.4" ];then
		echo "=============== Leap 15.4 ================="
		zypper addrepo https://download.opensuse.org/repositories/home:worldcitizen:GoldenCheetah/15.4/home:worldcitizen:GoldenCheetah.repo
		zypper addrepo https://download.opensuse.org/repositories/openSUSE:Leap:15.4:Update/standard/openSUSE:Leap:15.4:Update.repo
		sudo zypper refresh
		sudo zypper install vlc
	elif [ "$leap152" == "15.2" ];then
		echo "=============== Leap 15.2 ================="
		sudo zypper addrepo https://download.opensuse.org/repositories/openSUSE:Leap:15.2:Update/standard/openSUSE:Leap:15.2:Update.repo
		sudo zypper refresh
		sudo zypper install vlc

	elif [ "$Tumbleweed" == "Tumbleweed" ] || [ "$umbleweed" == "tumbleweed" ];then
		echo "=============== Tumbleweed ================="
		sudo zypper addrepo https://download.opensuse.org/repositories/home:StefanBruens:branches:multimedia:libs/openSUSE_Tumbleweed/home:StefanBruens:branches:multimedia:libs.repo
		sudo zypper refresh
		sudo zypper install vlc
	fi



}






vlc_remover(){

	if [ "$leap153" == "15.3" ];then


		sudo rm /etc/zypp/repos.d/Update.repo
		sudo zypper refresh
		sudo zypper -n remove vlc
	elif [ "$leap154" == "15.4" ];then

		sudo rm /etc/zypp/repos.d/GoldenCheetah.repo
		sudo rm /etc/zypp/repos.d/Update.repo
		sudo zypper refresh
		sudo zypper install vlc
	elif [ "$leap152" == "15.2" ];then

		sudo rm /etc/zypp/repos.d/Update.repo
		sudo zypper refresh
		sudo zypper install vlc

	elif [ "$Tumbleweed" == "Tumbleweed" ] || [ "$umbleweed" == "tumbleweed" ];then
		echo "=============== Tumbleweed ================="
		sudo rm /etc/zypp/repos.d/libs.repo
		sudo zypper refresh
		sudo zypper install vlc
	fi



}



vscode_repo(){

	echo "sudo zypper addrepo https://packages.microsoft.com/yumrepos/vscode vscode"

}



vscode_app(){

	echo "sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc"
	echo "sudo zypper addrepo https://packages.microsoft.com/yumrepos/vscode vscode"
	echo "sudo zypper refresh"
	echo "sudo zypper install code"
}







mediacodec_repo(){

	if [ "$leap153" == "15.3" ];then
		echo "=============== Leap 15.3 ================="

		echo "sudo zypper addrepo https://ftp.gwdg.de/pub/linux/misc/packman/suse/openSUSE_Leap_15.3/"
	elif [ "$leap154" == "15.4" ];then
		echo "=============== Leap 15.4 ================="
		echo "zypper addrepo https://download.opensuse.org/repositories/openSUSE:Leap:15.4:Update/standard/openSUSE:Leap:15.4:Update.repo"
	elif [ "$leap152" == "15.2" ];then
		echo "=============== Leap 15.2 ================="
		echo "sudo zypper addrepo https://download.opensuse.org/repositories/openSUSE:Leap:15.2:Update/standard/openSUSE:Leap:15.2:Update.repo"

	elif [ "$Tumbleweed" == "Tumbleweed" ] || [ "$umbleweed" == "tumbleweed" ];then
		echo "=============== Tumbleweed ================="
		echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:StefanBruens:branches:multimedia:libs/openSUSE_Tumbleweed/home:StefanBruens:branches:multimedia:libs.repo"
	fi


}



mediacodec_app(){

	if [ "$leap153" == "15.3" ];then
		echo "=============== Leap 15.3 ================="

		echo "sudo zypper addrepo https://ftp.gwdg.de/pub/linux/misc/packman/suse/openSUSE_Leap_15.3/"
		echo "sudo zypper refresh"
		echo "sudo zypper install vlc"
	elif [ "$leap154" == "15.4" ];then
		echo "=============== Leap 15.4 ================="
		echo "sudo zypper addrepo https://ftp.gwdg.de/pub/linux/misc/packman/suse/openSUSE_Leap_15.4/" 
		echo "zypper addrepo https://download.opensuse.org/repositories/openSUSE:Leap:15.4:Update/standard/openSUSE:Leap:15.4:Update.repo"
		echo "sudo zypper refresh"
		echo "sudo zypper install vlc"
	elif [ "$leap152" == "15.2" ];then
		echo "=============== Leap 15.2 ================="
		echo "sudo zypper addrepo https://download.opensuse.org/repositories/openSUSE:Leap:15.2:Update/standard/openSUSE:Leap:15.2:Update.repo"
		echo "sudo zypper refresh"
		echo "sudo zypper install vlc"

	elif [ "$Tumbleweed" == "Tumbleweed" ] || [ "$umbleweed" == "tumbleweed" ];then
		echo "=============== Tumbleweed ================="
		echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:StefanBruens:branches:multimedia:libs/openSUSE_Tumbleweed/home:StefanBruens:branches:multimedia:libs.repo"
		echo "sudo zypper refresh"
		echo "sudo zypper install vlc"
	fi


}





mediacodec(){

	echo "Start Install $yellow MultiMediaCodec  $reset Please Wait ... "
	
	if [ "$leap153" == "15.3" ];then
		echo "=============== Leap 15.3 ================="

		sudo zypper addrepo https://ftp.gwdg.de/pub/linux/misc/packman/suse/openSUSE_Leap_15.3/
		sudo zypper refresh
		sudo zypper install vlc
	elif [ "$leap154" == "15.4" ];then
		echo "=============== Leap 15.4 ================="
		sudo zypper addrepo https://ftp.gwdg.de/pub/linux/misc/packman/suse/openSUSE_Leap_15.4/
		zypper addrepo https://download.opensuse.org/repositories/openSUSE:Leap:15.4:Update/standard/openSUSE:Leap:15.4:Update.repo
		sudo zypper refresh
		sudo zypper install vlc
	elif [ "$leap152" == "15.2" ];then
		echo "=============== Leap 15.2 ================="
		sudo zypper addrepo https://download.opensuse.org/repositories/openSUSE:Leap:15.2:Update/standard/openSUSE:Leap:15.2:Update.repo
		sudo zypper refresh
		sudo zypper install vlc



	elif [ "$Tumbleweed" == "Tumbleweed" ] || [ "$umbleweed" == "tumbleweed" ];then
		echo "=============== Tumbleweed ================="
		sudo zypper addrepo https://download.opensuse.org/repositories/home:StefanBruens:branches:multimedia:libs/openSUSE_Tumbleweed/home:StefanBruens:branches:multimedia:libs.repo
		sudo zypper refresh
		sudo zypper install vlc
	fi


}





# MariaDB

mariadb_repo(){

	echo "=============== openSUSE 15 ==============="
	echo "https://yum.mariadb.org/RPM-GPG-KEY-MariaDB"
	echo "https://yum.mariadb.org/10.5/opensuse/15/x86_64"

}



mariadb_app(){

	echo "sudo rpm --import https://yum.mariadb.org/RPM-GPG-KEY-MariaDB"
	echo "sudo zypper --gpg-auto-import-keys refresh"
	echo "sudo zypper addrepo --gpgcheck --refresh https://yum.mariadb.org/10.5/opensuse/15/x86_64 mariadb"
  	echo "sudo zypper install MariaDB-server MariaDB-client"
	echo "sudo zypper install galera MariaDB-shared MariaDB-backup MariaDB-common"


}





mariadb(){

	echo "Start Install $yellow Mariadb 10.5  $reset Please Wait ... "
	
	sudo rpm --import https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
	sudo zypper --gpg-auto-import-keys refresh
	sudo zypper addrepo --gpgcheck --refresh https://yum.mariadb.org/10.5/opensuse/15/x86_64 mariadb
  	sudo zypper install MariaDB-server MariaDB-client
	sudo zypper install galera MariaDB-shared MariaDB-backup MariaDB-common


}




mariadb_remover(){
	sudo rm /etc/zypp/repos.d/mariadb.repo
	sudo rm /usr/bin/mysql
	sudo rm -rf /usr/share/mysql
  	sudo zypper -n remove MariaDB-server MariaDB-client
	sudo zypper -n remove galera MariaDB-shared MariaDB-backup MariaDB-common
}



# postgreSQL

postgre_repo(){

	echo "$red Attention : PostgreSQL 10 is available to install on openSUSE from default repositories $reset"

	echo "$yellow postgresql from home:EDV_Lotse:postgresql10 project  $reset"

	echo "=============== openSUSE Leap 15.2  ==============="
	echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:EDV_Lotse:postgresql10/openSUSE_Leap_15.2_images/home:EDV_Lotse:postgresql10.repo"

	echo "=============== openSUSE 15.4 ==============="
	echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:EDV_Lotse:postgresql10/15.4/home:EDV_Lotse:postgresql10.repo"
	echo "=============== openSUSE 15.3 ==============="
	echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:EDV_Lotse:postgresql10/15.3/home:EDV_Lotse:postgresql10.repo"
	echo "=============== openSUSE Leap 15.1 ==============="
	echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:EDV_Lotse:postgresql10/openSUSE_Leap_15.1_images/home:EDV_Lotse:postgresql10.repo"


}

postgre_app(){

	echo "=============== postgreSQL 10 ==============="
	echo "sudo zypper install postgresql10-server  postgresql10"

	echo "$yellow PostgreSQL comes in the official repositories of the distribution and its installation is quite simple. However, it is convenient to add your repository to always get the latest versions available. $reset"

	echo "=============== openSUSE Leap 15.2  ==============="
	echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:EDV_Lotse:postgresql10/openSUSE_Leap_15.2_images/home:EDV_Lotse:postgresql10.repo"
	echo "sudo zypper refresh"
	echo "sudo zypper install postgresql"

	echo "=============== openSUSE 15.4 ==============="
	echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:EDV_Lotse:postgresql10/15.4/home:EDV_Lotse:postgresql10.repo"

	echo "sudo zypper refresh"
	echo "sudo zypper install postgresql"
	echo "=============== openSUSE 15.3 ==============="
	echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:EDV_Lotse:postgresql10/15.3/home:EDV_Lotse:postgresql10.repo"

	echo "sudo zypper refresh"
	echo "sudo zypper install postgresql"
	echo "=============== openSUSE Leap 15.1 ==============="
	echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:EDV_Lotse:postgresql10/openSUSE_Leap_15.1_images/home:EDV_Lotse:postgresql10.repo"
	echo "sudo zypper refresh"
	echo "sudo zypper install postgresql"


}





postgreSQL_Installler(){


	echo "Start Install $yellow postgreSQL $reset Please Wait ... "

	#"=============== openSUSE 15.2 ==============="
	sudo zypper addrepo https://download.opensuse.org/repositories/home:EDV_Lotse:postgresql10/openSUSE_Leap_15.2_images/home:EDV_Lotse:postgresql10.repo
	sudo zypper refresh
	sudo zypper install postgresql

	# "=============== openSUSE 15.4 ==============="
	sudo zypper addrepo https://download.opensuse.org/repositories/home:EDV_Lotse:postgresql10/15.4/home:EDV_Lotse:postgresql10.repo

	sudo zypper refresh
	sudo zypper install postgresql
	# "=============== openSUSE 15.3 ==============="
	sudo zypper addrepo https://download.opensuse.org/repositories/home:EDV_Lotse:postgresql10/15.3/home:EDV_Lotse:postgresql10.repo

	sudo zypper refresh
	sudo zypper install postgresql
	# =============== openSUSE Leap 15.1 ==============="
	sudo zypper addrepo https://download.opensuse.org/repositories/home:EDV_Lotse:postgresql10/openSUSE_Leap_15.1_images/home:EDV_Lotse:postgresql10.repo
	sudo zypper refresh
	sudo zypper install postgresql


}











# clean unneeded

remove_unneeded(){

	# This Function clean out all unneeded autoinstalled dependencies
	echo "$red Start clean out all unneeded autoinstalled dependencies $reset"
	sleep 2
	zypper packages --unneeded | awk -F'|' 'NR==0 || NR==1 || NR==2 || NR==3 || NR==4 {next} {print $3}' > list
	while read p; do sudo zypper -n rm -y "$p"; done < list
	rm -rf list

	echo "all unneeded autoinstalled dependencies cleaned $green [ OK ] $reset"



}




info(){



	echo " A simple and Straightforward Package Manager for OpenSUSE that can make Everyday Tasks Easier" 
	echo " for developers and system administrators."
	echo ""
	echo "- Supported Distrubutions : Leap and Tumbleweed"
	echo "- update and Upgrade and dist upgrade Like ubuntu and Fedora"
	echo "- Remove Unneed packages"
	echo "- show Package Providers"
	echo "- List Installed Apps"
	echo "- show repositories"
	echo "- show known apps"
	echo "- show Installation Manual"
	echo "- Support for software that is not supported by the main package manager"
	echo "- My own open source software has also been added to this script."
	echo "- Recommending documents to read about the requested software"
	echo "- Install and Remove Packages"
	echo ""
	echo "$yellow ========================================================================= $reset"
	echo ""
	echo "$yellow There is no claim that this package manager is better or more optimal than the others. $reset"
	echo "$yellow The goal is to improve platforms or make things easier.$reset"
	echo "$yellow I wrote this package manager for my daily tasks I am in this philosophy that $reset"
	echo "$yellow I try to write everything I need myself and I wanted to make it available to others.$reset "
	echo "$yellow and support and accompany us to make the conditions better for ourselves. $reset"
	echo ""
	echo "$yellow ========================================================================== $reset"
	echo ""
	echo "> Developer : Koosha Yeganeh"
	echo "> GitHub : https://github.com/KooshaYeganeh"
	echo "> DockerHub : https://hub.docker.com/u/kooshakooshadv"
	echo "> GitBooks : kooshayeganeh.gitbook.io"
	echo "> and Some More $yellow :) $reset"

}


support_systems(){

	echo "=============== Tumbleweed ==============="
	echo "For Developers, openSUSE Contributors, Gamers and Linux/FOSS Enthusiasts"
	echo "Rolling release with the latest packages provided by the openSUSE Project."
	
	echo "=============== Leap ==============="
	echo "For Sysadmins, Enterprise Developers, and ‘Regular’ Desktop Users"
	echo "Regular release with the benefits of both enterprise-grade engineering and community-developed innovation."


}


list_repo(){

	repos=`ls /etc/zypp/repos.d`
	for repo in $repos;do
		echo " > $repo"
		echo "------------------------------------"
	done

	total=`ls /etc/zypp/repos.d | wc -l`
	echo "Total Number of Repositories : $total"
}








list_install(){

	echo "installed $yellow Apps $reset"
	rpm -qa


}


update(){



	sudo zypper refresh

}


upgrade (){


	sudo zypper update
}



dist_upgrade(){

	echo "$red This command will upgrade your Suse Linux version to the latest version $reset"
	echo "$red Are You Sure $reset $green(y/n)$reset"
	read sure_reponse
	if [ "$sure_reponse" == "y" ] || [ "$sure_reponse" == "Y" ] || \
		[ "$sure_reponse" == "yes" ] || [ "$sure_reponse" == "YES" ];then
		sudo zypper refresh
		sudo zypper update 
		zypper modifyrepo –enable repo-update
		echo "Enter Current Version"
		read current_version
		sudo sed -i 's/$current_version/${releasever}/g' /etc/zypp/repos.d/*.repo 
		sudo zypper --releasever=15.4 refresh
		sudo zypper --releasever=15.4 dup  --force-resolution
	elif [ "$sure_reponse" == "n" ] || [ "$sure_reponse" == "N" ] || \
			[ "$sure_reponse" == "no" ] || [ "$sure_reponse" == "NO" ];then
				echo "You have given up on upgrading your system."
				echo "Good luck"
	else
		echo "please Enter Valid Response"
	fi

}



gcc(){

	echo "Start Install $yellow gcc  $reset Please Wait ... "
	
	sudo zypper -n install gcc

	if [ -f "/usr/bin/gcc" ];then
		echo "gcc installed [ OK ]"
	else
		echo "Error on gcc Installation"
	fi
}


gcc_remover(){
	echo "This file is required to run the rest of the files. Do you want to delete this file?(y/n)"
	read gcc_reponse
	if [ "$gcc_reponse" == "Y" ] || [ "$gcc_reponse" == "y" ];then
			sudo zypper -n remove gcc
	elif [ "$gcc_reponse" == "N" ] || [ "$gcc_reponse" == "n" ];then
			true
	else
		echo "Enter Valid Response"
		exit 0
	fi
}	

git(){

	echo "Start Install $yellow Git $reset Please Wait ... "
	sudo zypper -n install git
	if [ -f "/usr/bin/git" ];then
		echo "git installed [ OK ]"
	else
		echo "Error on git Installation"
	fi
}


git_remover(){
	sudo zypper -n remove "git*"
}



mercurial(){
	
	echo "Start Install $yellow Mercurial $reset Please Wait ... "
	
	# simple version Control App Like Git
	sudo zypper -n install mercurial
	if [ -f "/usr/bin/hg" ];then
		echo "Mercurial installed [ OK ]"
	else
		echo "Error on Mercurial Installation"
	fi
	
}


mercurial_remover(){
	sudo zypper -n remove mercurial

}



zsh(){


	
	sudo zypper -n install zsh

	echo "Start Install $yellow zsh  $reset Please Wait ... "
	
	if [ -f "/usr/bin/zsh" ];then
		echo "zsh installed [ OK ]"
	else
		echo "Error on zsh Installation"
	fi
}

zsh_remover(){

	sudo zypper -n remove "zsh*"

}

tmux (){


	sudo zypper -n install tmux

	echo "Start Install $yellow Tmux  $reset Please Wait ... "
}

tmux_remover(){
	sudo zypper -n remove tmux
}




# Basic Tools

basic_tools(){

	echo "Start Install $yellow Basic Tools  $reset Please Wait ... "
	echo "Basic Tools : $yellow 1- Git 2- wget 3- curl 4- net-tools-deprecated $reset"
	sudo zypper -n installl git
	sudo zypper -n install wget
	sudo zypper -n install curl
	sudo zypper -n net-tools-deprecated
	tmux
	if [ -f "/usr/bin/git" ] && [ -f "/usr/bin/wget" ] && [ -f "/usr/bin/curl" ];then
		echo "basic Tools installed [ OK ]"
	else
		echo "Error on Basic tools Installation"
	fi

}

basic_tools_remover(){

	gcc_remover
	git_remover
	sudo zypper -n remove wget curl
}




ohmyzsh(){
	
	
	sudo zypper -n install zsh

	echo "Start Install $yellow ohmyzsh $reset Please Wait ... "
	
	sh -c "$(wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)"

	if [ -f "~/.zshrc" ];then
		echo "oh-my-zsh installed [ OK ]"
	else
		echo "Error on Ohmyzsh Installation"
	fi
	echo "exec zsh" >> ~/.bashrc


}

ohmyzsh_remover(){
	sudo rm ~/.zshrc
	
}



command_line_tools(){

		echo "Start Install $yellow Command Line Tools $reset Please Wait ... "
		echo "Start Install $yellow 1- zsh 2- ohmyzsh 3- Tmux  $reset Please Wait ... "
		zsh
		ohmyzsh
		tmux
}


command_line_tools_remover(){
	
	zsh_remover
	sudo rm ~/.zshrc
	tmux_remover

}




picocom(){
	echo "Start to Install $yellow picocom $reset Please Wait ..."
	sudo zypper -n install picocom
}


picocom_remover(){
	sudo zypper -n remove picocom
}


vlang(){

	echo "start Install Vlang From Source ..."
	cd
	git clone https://github.com/vlang/v
	echo "File Downloaded form GitHub [ OK ]"
	cd v 
	make
	sudo ./v symlink
	echo "Symbolik Link is Created [ OK ]"
	echo "VLang Installed Successfully [ OK ]"

}




lshardware(){
	
	echo "Start Install $yellow lshw $reset Please Wait ... "
	sudo zypper -n install lshw
	if [ -f "/usr/sbin/lshw" ];then
		echo "lshw installed [ OK ]"
	else
		echo "Error on lshw Installation"
	fi

}








openconnect(){

	echo "Start Install $yellow openconnect  $reset Please Wait ... "
	
	sudo zypper -n install openconnect

	if [ -f "/usr/sbin/openconnect" ];then
		echo "openconnect installed [ OK ]"
	else
		echo "Error on openconnect Installation"
	fi
}

openconnect_remover(){
	sudo zypper -n remove openconnect
}



openvpn(){

	echo "Start Install $yellow openvpn  $reset Please Wait ... "
	
	sudo zypper -n install openvpn

	if [ -f "/usr/sbin/openvpn" ];then
		echo "openvpn installed [ OK ]"
	else
		echo "Error on openvpn Installation"
	fi
}


openvpn_remover(){
	sudo zypper -n remove openvpn
}

# Editos

vscode(){


	echo "Start Install $yellow Microsoft vscode $reset Please Wait ... "
	
	sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
	sudo zypper addrepo https://packages.microsoft.com/yumrepos/vscode vscode
	sudo zypper refresh
	sudo zypper -n install code

	if [ -f "/usr/bin/code" ];then
		echo "VScode installed [ OK ]"
	else
		echo "Error on VScode Installation"
	fi
}



vscode_remove(){


	sudo rm /etc/zypp/repos.d/vscode
	sudo zypper -n remove code
}





# vim

vim(){

	echo "Start Install $yellow vim ( vi Imporeved ) $reset Please Wait ... "
	

	sudo zypper -n install vim

	if [ -f "/usr/bin/git" ];then
		git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
	else
		sudo zypper install git
		git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
	fi
	
	if [ -f "/usr/bin/vim" ];then
		echo "Vim installed [ OK ]"
	else
		echo "Error on Vim Installation"
	fi

}



vim_remover(){

	sudo zypper -n remove vim
	sudo rm ~/.vimrc


}



# Database




mariadb(){
	
	echo "Start Install $yellow MariaDB $reset Please Wait ... "
	
	sudo rpm --import https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
	sudo zypper --gpg-auto-import-keys refresh
	if [ -f "/etc/zypp/repos.d/mariadb.repo" ];then
		sudo rm /etc/zypp/repos.d/mariadb.repo
		sudo zypper addrepo --gpgcheck --refresh https://yum.mariadb.org/10.5/opensuse/15/x86_64 mariadb
		sudo zypper install MariaDB-server MariaDB-client
		sudo zypper install galera MariaDB-shared MariaDB-backup MariaDB-common


	else
	
		sudo rm /etc/zypp/repos.d/mariadb.repo
		sudo zypper addrepo --gpgcheck --refresh https://yum.mariadb.org/10.5/opensuse/15/x86_64 mariadb
		sudo zypper install MariaDB-server MariaDB-client
		sudo zypper install galera MariaDB-shared MariaDB-backup MariaDB-common
	fi
	


	if [ -f "/usr/bin/mariadb" ];then
		echo "mariaDB installed [ OK ]"
	else
		echo "Error on mariaDB Installation"
	fi
}





mariadb_remover(){


	sudo rm /etc/zypp/repos.d/mariadb
	sudo zypper -n remove MariaDB-server MariaDB-client
	sudo zypper -n remove galera MariaDB-shared MariaDB-backup MariaDB-common


}


postgre(){

	echo "Start Install PostgreSQL10"
	sudo zypper install postgresql10-server  postgresql10
	echo "PostgreSQL Installed [ OK ]"

	if [ -f "/usr/bin/psql" ];then
		echo "postgreSQL installed [ OK ]"
	else
		echo "Error on postgreSQL Installation"
	fi
}




postgre_remover(){



	#"=============== openSUSE 15.2 ==============="
	sudo rm /etc/zypp/repos.d/postgresql10.repo
	sudo zypper refresh
	sudo zypper -n remove postgresql

	# "=============== openSUSE 15.4 ==============="
	sudo rm /etc/zypp/repos.d/postgresql10.repo
	sudo zypper refresh
	sudo zypper -n remove postgresql
	# "=============== openSUSE 15.3 ==============="
	sudo rm /etc/zypp/repos.d/postgresql10.repo
	sudo zypper refresh
	sudo zypper -n remove postgresql
	# =============== openSUSE Leap 15.1 ==============="
	sudo rm /etc/zypp/repos.d/postgresql10.repo
	sudo zypper refresh
	sudo zypper -n remove postgresql


}


sqlite(){


	echo "Start Install $yellow SQLite3  $reset Please Wait ... "
	sudo zypper -n install sqlite3


	if [ -f "/usr/bin/sqlite3" ];then
		echo "sqlite3 installed [ OK ]"
	else
		echo "Error on sqlite3 Installation"
	fi
}




sqlite_remover(){
	sudo zypper -n remove "sqlite*"
}

influx(){


	echo "Start Install $yellow InfuxDB  $reset Please Wait ... "
	sudo zypper -n install influxdb


	if [ -f "/usr/bin/influxdb" ];then
		echo "Vim installed [ OK ]"
	else
		echo "Error on Vim Installation"
	fi

}



influx_remover(){



	sudo zypper -n remove "influx*"
}



mongodb(){

	echo "Start Install $yellow mongoDB  $reset Please Wait ... "
	
	sudo zypper -n install mongodb


	if [ -f "/usr/bin/mongodb" ];then
		echo "mongodb installed [ OK ]"
	else
		echo "Error on mongodb Installation"
	fi


}


mongodb_remover(){


	sudo zypper -n remove "mongodb*"
}


#web server

nginx(){


	echo "Start Install $yellow Nginx  $reset Please Wait ... "
	
	sudo zypper -n install nginx

	if [ -f "/usr/sbin/nginx" ] && [ -f "/etc/nginx" ];then
		echo "nginx installed [ OK ]"
	else
		echo "Error on Vim Installation"
	fi



}


nginx_remover(){
	sudo zypper -n remove "nginx*"
}


apache(){

	echo "Start Install $yellow Apache Web Server  $reset Please Wait ... "
	sudo zypper -n install apache2

	if [ -f "/etc/sysconfig/apache2" ] || [ -f "/etc/apache2/" ];then
		echo "Apache installed [ OK ]"
	else
		echo "Error on Apache Installation"
	fi

}


apache_remover(){


	sudo zypper -n remove "apache*"
	sudo zypper -n remove modsecurity
}


# Network Tools


nmap(){

	echo "Start Install $yellow Nmep ( Network Mapper ) $reset Please Wait ... "

	sudo zypper -n install nmap

	if [ -f "/usr/bin/nmap" ];then
		echo "nmap installed [ OK ]"
	else
		echo "Error on nmap Installation"
	fi


}


nmap_remover(){


	sudo zypper -n remove nmap
}


tcpdump(){


	echo "Start Install $yellow TcpDump ( data-network packet analyzer ) $reset Please Wait ... "
	sudo zypper -n install tcpdump

	if [ -f "/usr/bin/tcpdump" ];then
		echo "tcpdump installed [ OK ]"
	else
		echo "Error on tcpdump Installation"
	fi


}





tcpdump(){
	sudo zypper -n remove tcpdump
}

wireshark(){


	echo "Start Install $yellow ( Wireshark )  $reset Please Wait ... "
	
	sudo zypper -n install wireshark

	if [ -f "/usr/sbin/wireshrk" ];then
		echo "wireshark installed [ OK ]"
	else
		echo "Error on wireshark Installation"
	fi


}


wireshrk_remover(){



	sudo zypper -n remove wireshark
}

iptraf(){

	echo "Start Install $yellow iptraf-ng $reset Please Wait ... "

	sudo zypper -n install iptraf-ng

	if [ -f "/usr/bin/iptraf-ng" ];then
		echo "iptraf-ng installed [ OK ]"
	else
		echo "Error on iptraf-ng Installation"
	fi


}


iptraf_remover(){


	sudo zypper -n remove iptraf-ng

}


# Network_Tools_All

network_tools(){

	echo "Start Install $yellow network tools  $reset Please Wait ... "
	echo "Start Install $yellow 1- Nmap 2- TcpDump 3- wireshark 4- iptraf-ng $reset Please Wait ... "

	sudo zypper -n install nmap
	sudo zypper -n install tcpdump
	sudo zypper -n install wireshark
	sudo zypper -n install iptraf-ng

	if [ -f "/usr/bin/iptraf-ng" ] && [ -f "/usr/sbin/wireshark" ] && \
	       	[ -f "/usr/bin/nmap" ] && [ -f "/usr/bin/tcpdump" ];then
		echo "Network Tools installed [ OK ]"
	else
		echo "Error on Network_Tools Installation"
	fi
}


network_tools_remover(){


	sudo zypper -n remove nmap
	sudo zypper -n remove tcpdump
	sudo zypper -n remove wireshark
	sudo zypper -n remove iptraf-ng


}



docker(){


	echo "Start Install $yellow Docker $reset Please Wait ... "
	
	sudo zypper -n install docker


	if [ -f "/usr/bin/docker" ];then
		echo "docker installed [ OK ]"
	else
		echo "Error on docker Installation"
	fi



}


docker_remover(){



	sudo zypper -n remove docker
}

adb(){




	echo "Start Install $yellow Android_Tools  $reset Please Wait ... "
	
	if [ "$Tumbleweed" == "Tumbleweed" ] || [ "$tumbleweed" == "tumbleweed" ];then

		sudo zypper addrepo https://download.opensuse.org/repositories/home:GNorth/openSUSE_Tumbleweed/home:GNorth.repo
		sudo zypper refresh
		sudo zypper -n install android-tools
		if [ -f "/usr/bin/adb" ];then
			echo "Android Tools Installed [ OK ]"
		else
			echo "Error on Adnroid Tools installaion [ ERROR ]"
		fi
		

	elif [ "$leap152" == "15.2" ];then
		sudo zypper addrepo https://download.opensuse.org/repositories/home:AndnoVember:test/openSUSE_Leap_15.2/home:AndnoVember:test.repo

		sudo zypper refresh
		sudo zypper -n install android-tools
		if [ -f "/usr/bin/adb" ];then
			echo "Android Tools Installed [ OK ]"
		else
			echo "Error on Adnroid Tools installaion [ ERROR ]"
		fi
	elif [ "$leap154" == "15.4" ];then
		sudo zypper addrepo https://download.opensuse.org/repositories/home:AndnoVember:test/15.4/home:AndnoVember:test.repo
		sudo zypper refresh
		sudo zypper -n install android-tools

		if [ -f "/usr/bin/adb" ];then
			echo "Android Tools Installed [ OK ]"
		else
			echo "Error on Adnroid Tools installaion [ ERROR ]"
		fi
	elif [ "$leap153" == "15.3" ];then
		sudo zypper addrepo https://download.opensuse.org/repositories/home:cabelo:innovators/15.3/home:cabelo:innovators.repo
		sudo zypper addrepo https://download.opensuse.org/repositories/home:embar-:Lietukas/openSUSE_Leap_15.3/home:embar-:Lietukas.repo
		sudo zypper refresh
		sudo zypper -n install android-tools
		if [ -f "/usr/bin/adb" ];then
			echo "Android Tools Installed [ OK ]"
		else
			echo "Error on Adnroid Tools installaion [ ERROR ]"
		fi
	fi
}




adb_remover(){



	if [ "$Tumbleweed" == "Tumbleweed" ] || [ "$tumbleweed" == "tumbleweed" ];then

		
		

		sudo rm /etc/zypp/repos.d/GNorth.repo
		sudo rm /etc/zypp/repos.d/ahjolinna.repo
		sudo rm /etc/zypp/repos.d/mrbadguy.repo

		sudo zypper refresh
		sudo zypper -n remove android-tools

	elif [ "$leap152" == "15.2" ];then



		sudo rm /etc/zypp/repos.d/test.repo

		sudo zypper refresh
		sudo zypper -n remove android-tools


	elif [ "$leap153" == "15.3" ];then
		
		sudo rm /etc/zypp/repos.d/test.repo
		
		sudo rm /etc/zypp/repos.d/Lietukas.repo
		
		sudo zypper refresh
		sudo zypper install android-tools


	elif [ "$leap154" == "15.4" ];then


		sudo rm /etc/zypp/repos.d/test.repo

		sudo rm /etc/zypp/repos.d/GNorth.repo

		sudo rm /etc/zypp/repos.d/erbster0815.repo

		sudo rm /etc/zypp/repos.d/ahjolinna.repo
		
		sudo rm /etc/zypp/repos.d/mrbadguy.repo

		sudo zypper refresh
		sudo zypper -n remove android-tools

	elif [ "$leap155" == "15.5" ];then

		sudo rm /etc/zypp/repos.d/test.repo

		sudo rm /etc/zypp/repos.d/Herbster0815.repo


		sudo zypper refresh
		sudo zypper -n remove android-tools
	else
		echo "Can not Detect Distibutions"
	fi
}









clamav_repo(){
	if [ "$leap153" == "15.3" ];then
		echo "$yellow Repository Name: clamav from home:ecsos project $reset"
		echo "=============== Leap 15.3 ================="
		echo "zypper addrepo https://download.opensuse.org/repositories/home:ecsos/15.3/home:ecsos.repo"
	elif [ "$leap154" == "15.4" ];then
		echo "=============== Leap 15.4 ================="
		echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:ecsos/15.4/home:ecsos.repo"
	elif [ "$leap155" == "15.5" ];then
		echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:ecsos/15.5/home:ecsos.repo"
	elif [ "$Tumbleweed" == "Tumbleweed" ] || [ "$tumbleweed" == "tumbleweed" ];then
		echo "=============== Tumbleweed ================="
		echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:ecsos/15.5/home:ecsos.repo"
	fi
}

clamav_app(){

	if [ "$leap153" == "15.3" ];then
		echo "zypper addrepo https://download.opensuse.org/repositories/home:ecsos/15.3/home:ecsos.repo"
		echo "sudo zypper refresh"
		echo "sudo zypper -n install clamav"
	elif [ "$leap154" == "15.4" ];then
		echo "=============== Leap 15.4 ================="
		echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:ecsos/15.4/home:ecsos.repo"
		echo "sudo zypper refresh"
		echo "sudo zypper -n install clamav"
	elif [ "$leap155" == "15.5" ];then
		echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:ecsos/15.5/home:ecsos.repo"
		echo "sudo zypper refresh"
		echo "sudo zypper -n install clamav"
	elif [ "$Tumbleweed" == "Tumbleweed" ] || [ "$tumbleweed" == "tumbleweed" ];then
		echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:ecsos/15.5/home:ecsos.repo"
		echo "sudo zypper refresh"
		echo "sudo zypper -n install clamav"
	fi


}



clamav(){


	echo "Start Install $yellow clamAV ( Antivirus For Linux )  $reset Please Wait ... "
	
	sudo zypper -n install clamav
	if [ -f "/usr/bin/clamscan" ];then
		echo "clamAV installed [ OK ]"
	else
		echo "Error on clamAV installation"
	fi
}


clamav_remover(){

	if [ "$leap153" == "15.3" ];then
		sudo rm /etc/zypp/repos.d/ecsos.repo
		sudo zypper refresh
		sudo zypper -n remove clamav
	elif [ "$leap154" == "15.4" ];then
		echo "=============== Leap 15.4 ================="
		sudo rm /etc/zypp/repos.d/ecsos.repo
		sudo zypper refresh
		sudo zypper -n remove clamav
	elif [ "$leap155" == "15.5" ];then
		sudo rm /etc/zypp/repos.d/ecsos.repo
		sudo zypper refresh
		sudo zypper -n remove clamav
	elif [ "$Tumbleweed" == "Tumbleweed" ] || [ "$tumbleweed" == "tumbleweed" ];then
		sudo rm /etc/zypp/repos.d/ecsos.repo
		sudo zypper refresh
		sudo zypper -n remove clamav
	fi






}


maldet(){

	echo "Start Install $yellow LMD ( Linux Malware Detect )  $reset Please Wait ... "
	
	if [ -f "/usr/bin/wget" ];then
		cd /tmp
		wget http://www.rfxn.com/downloads/maldetect-current.tar.gz
		tar xfz maldetect-current.tar.gz
		cd maldetect-1.6.4
		./install.sh
		cd
		if [ -f "/usr/local/sbin/maldet" ];then
			echo "Malware Detect Installed [ OK ]"
		else
			echo "Error on Malware Detect installation"
		fi
	else
		sudo zypper -n install wget
		cd /tmp
		wget http://www.rfxn.com/downloads/maldetect-current.tar.gz
		tar xfz maldetect-current.tar.gz
		cd maldetect-1.6.4
		./install.sh
		cd
		if [ -f "/usr/local/sbin/maldet" ];then
			echo "Malware Detect Installed [ OK ]"
		else
			echo "Error on Malware Detect installation"
		fi
	fi
}


malware_detect_remover(){

	sudo rm /usr/local/sbin/maldet


}


rkhunter(){

	echo "Start Install $yellow RKHunter $reset Please Wait ... "
	
	sudo zypper -n install rkhunter

	if [ -f "/usr/bin/rkhunter" ];then
		echo "rkhunter Installed [ OK ]"
	else
		echo "Error on rkhunter installation"
	fi

}


rkhunter_remover(){


	sudo zypper -n remove rkhunter

}

lynis(){

	echo "Start Install $yellow Lynis $reset Please Wait ... "
	
	sudo zypper -n install lynis

	if [ -f "/usr/bin/lynis" ];then
		echo "lynis Installed [ OK ]"
	else
		echo "Error on lynis installation"
	fi
}



lynis_remover(){

	sudo zypper -n remove lynis


}


antivirus(){


	echo "Start Install $yellow Antivirus $reset Please Wait ... "
	echo "Start Install This Tools : $yellow 1- clamAV 2- RKHunter 3- Lynis  $reset Please Wait ... "
	clamav
	maldet
	rkhunter
	lynis
}


antivirus_remover(){


	clamav_remover
	malware_detect_remover
	rkhunter_remover
	lynis_remover
}


fail2ban(){


	echo "Start Install $yellow Fail2Ban $reset Please Wait ... "
	sudo zypper -n install fail2ban

	if [ -f "/etc/fail2ban" ];then
		echo "fail2ban Installed [ OK ]"
	else
		echo "Error on fail2ban installation"
	fi
}



fail2ban_remover(){

	sudo zypper -n install fail2ban
}



tcpwrapper(){

	echo "Start Install $yellow TcpWrapper $reset Please Wait ... "
	
	sudo zypper -n install tcpd

	if [ -f "/usr/sbin/tcpd" ];then
		echo "tcpwrapper Installed [ OK ]"
	else
		echo "Error on tcpwrapper installation"
	fi


}


tcpwrapper_remover(){


	sudo zypper -n remove tcpd
}


firewalld(){


	echo "Start Install $yellow FirewallD  $reset Please Wait ... "
	
	sudo zypper -n install firewalld

	if [ -f "/usr/sbin/firewalld" ];then
		echo "firewalld Installed [ OK ]"
	else
		echo "Error on firewalld installation"
	fi


}


firewalld_remover(){

	sudo zypper -n remove firewalld
}

psad(){


	echo "Start Install $yellow Psad ( port scans and other suspicious traffic Detector ) $reset Please Wait ... "

	mkdir /tmp/psad
	cd /tmp/psad
	wget http://www.cipherdyne.org/psad/download/psad-2.2-1.x86_64.rpm
	rpm -ivh psad-2.2-1.x86_64.rpm 
	cd ..
	rm -rf psad

	if [ -d "/etc/psad" ];then
		echo "psad Installed Successfully [ OK ]"
	else
		echo "Error on psad installation"
	fi

}


psad_remover(){

	sudo rm /etc/psda

}



network_security(){

	echo "Start Install $yellow  $reset Please Wait ... "
	echo "Start Install $yellow 1- FirewallD 2- TcpWrapper 3- Fail2Ban 3- Psad  $reset "
	
	firewalld
	tcpwrapper
	fail2ban
	psad



}


network_security_remover(){


	psad_remover
	firewalld_remover
	tcpwrapper_remover
	fail2ban_remover

}


# WAF : Web Application Firewall

apache_waf(){

	
	echo "Start Install $yellow Apache2 ( ModSecurity ) $reset Please Wait ... "
	sudo zypper -n install modsecurity
}





nginx_waf(){


	echo "Start Install $yellow Nginx ( Modsecurity )  $reset Please Wait ... "
	
	sudo zypper -n install nginx-module-modsecurity


}


openssh(){


	echo "Start Install $yellow openssh  $reset Please Wait ... "
	
	sudo zypper -n install openssh-server

	if [ "/etc/sshd/sshd.config" ];then
		echo "openssh Installed [ OK ]"
	else
		echo "Error on openssh installation"
	fi
}



openssh_remover(){


	sudo zypper -n remove "openssh*"
}

sshfs(){


	echo "Start Install $yellow SSHFS ( Transferring files over an SSH connection and Mount Remote Directory by Using SSH )  $reset Please Wait ... "
	
	sudo zypper -n install sshfs

	if [ "/usr/bin/sshfs" ];then
		echo "sshfs Installed [ OK ]"
	else
		echo "Error on sshfs installation"
	fi

}


sshfs_remover(){

	sudo zypper -n remove sshfs
}


usbguard(){

	echo "Start Install $yellow USBGuard $reset Please Wait ... "
	
	sudo zypper -n install usbguard

	if [ "/etc/usbguard" ];then
		echo "usbguard Installed [ OK ]"
	else
		echo "Error on usbguard installation"
	fi

}

usbguard_remover(){


	sudo zypper -n remove usbguard
}


jpg(){

	echo "Start Install $yellow jpegoptim $reset Please Wait ... "
	
	sudo zypper -n install jpegotim

	if [ -f "/usr/bin/jpegoptim" ];then
		echo "jpegoptim Installed [ OK ]"
	else
		echo "Error on jpegoptim installation"
	fi

}


jpgoptim_remover(){

	sudo zypper -n remove jpegotim


}

png(){

	echo "Start Install $yellow optipng $reset Please Wait ... "
	
	sudo zypper -n install optipng


	if [ -f "/usr/bin/optipng" ];then
		echo "optipng Installed [ OK ]"
	else
		echo "Error on optipng installation"
	fi

}


optipng_remover(){

	sudo zypper -n remove optipng

}

exiftool(){

	echo "Start Install $yellow ExifTools  $reset Please Wait ... "
	
	sudo zypper -n install exiftool

	if [ -f "/usr/bin/exiftool" ];then
		echo "exiftool installed [ OK ]"
	else
		echo "Error on exiftool installation"
	fi

}


exiftool_remover(){
	sudo zypper -n remove exiftool
}



image_optimizer(){

	echo "Start Install $yellow  $reset Please Wait ... "
	echo "Start Install $yellow 1- jpegoptim 2- optipng 3- ExifTool  $reset"

	jpg
	png
	exif

}



image_optimizer_remover(){

	jpegotim_remover
	optipng_remover
	exiftool_remover
}


telegram(){

	echo "Start Install $yellow Telegram $reset Please Wait ... "
	
	cd /home/$USER/Downloads
	wget https://updates.tdesktop.com/tlinux/tsetup.4.6.2.tar.xz

	tar xf tsetup.4.6.2.tar.xz
	cd Telegram
	cd /usr/bin
	sudo ln -s /home/$USER/Downloads/Telegram/Telagram Telegram
	sudo ln -s /home/$USER/Downloads/Telegram/Updater Telegram_Updater
	cd /home/$USER/Downloads/Telegram
	./Telegram&
}



telegram_remover(){

	sudo zypper -n remove telegram
	sudo rm /usr/bin/Telegram
	sudo rm /usr/bin/Telegram_Updater
	sudo rm /opt/Telegram
	sudo rm /home/$USER/Downloads/Telegram

}




viber(){
	
	echo "Start Get $yellow Viber $reset From Source"
	
	cd /tmp
	wget https://download.cdn.viber.com/desktop/Linux/viber.rpm
	rpm -ivh viber.rpm
	cd
}





slack(){

	echo "Start Install $yellow Slack  $reset Please Wait ... "
	cd /tmp
	
	wget https://downloads.slack-edge.com/releases/linux/4.29.149/prod/x64/slack-4.29.149-0.1.el8.x86_64.rpm
	
	rpm -ivh slack-4.29.149-0.1.el8.x86_64.rpm
	cd
	

}



jami(){

	echo "Start Install $yellow Jami  $reset Please Wait ... "
	if [ "$154" == "15.4" ];then
		sudo zypper addrepo https://dl.jami.net/nightly/opensuse-leap_15.4/jami-nightly.repo
		sudo zypper install jami
	elif [ "$153" == "15.3" ];then
		sudo zypper addrepo https://dl.jami.net/nightly/opensuse-leap_15.3/jami-nightly.repo
		sudo zypper install jami

	else
		echo "I Can Not Detect Distributions"
	fi

}


ansible(){

	echo "Start Install $yellow Ansible $reset Please Wait ... "
	sudo zypper -n install ansible

	if [ -f "/usr/bin/ansible" ];then
		echo "Ansible Installed [ OK ]"
	else
		echo "Error on Ansible installation"
	fi

}


ansible_remover(){

	sudo zypper -n remove ansible
}


puppet_repo(){


	echo "Start Install $yellow Puppet $reset Please Wait ... "
	
	echo "$yellow Repository Name : puppet from home:steffens:lvermgeo:server project $reset"

	echo "=============== SUSE 15.4  ==============="
	echo "zypper addrepo https://download.opensuse.org/repositories/home:steffens:lvermgeo:server/SUSE_15.4/home:steffens:lvermgeo:server.repo"
	echo "=============== SLE 15 SP3 ==============="
	echo "sudo zypper addrepo https://download.opensuse.org/repositories/home:steffens:lvermgeo:server/SLE_15_SP3/home:steffens:lvermgeo:server.repo"
	echo "=============== SLE 15 SP2 ==============="
	echo "zypper addrepo https://download.opensuse.org/repositories/home:steffens:lvermgeo:server/SLE_15_SP2/home:steffens:lvermgeo:server.repo"




}




puppet(){


	sudo zypper -n install puppet-agent
	if [ -f "/opt/puppetlabs/bin/puppet" ];then
		echo "Puppet Installed [ OK ]"
	else
		echo "Error on Puppet installation"
	fi


}


puppet_remover(){

	sudo zypper -n remove puppet-agent
	sudo rm /opt/puppetlabs/bin/puppet
}

tuned(){

	
	echo "Start Install $yellow Tuned $reset Please Wait ... "
	sudo zypper -n install tuned tuned-utils tuned-utils-systemtap

	if [ -f "/usr/sbin/tuned" ];then
		echo "tuned Installed [ OK ]"
	else
		echo "Error on tuned installation"
	fi
}


tuned_remover(){

	sudo zypper -n remove tuned tuned-utils tuned-utils-systemtap
}



# Monitoring

htop(){

	
	echo "Start Install $yellow htop $reset Please Wait ... "
	sudo zypper -n install htop

	if [ -f "/usr/bin/htop" ];then
		echo "htop Installed [ OK ]"
	else
		echo "Error on htop installation"
	fi
}


htop_remover(){
	sudo zypper -n remove htop
}

munin(){

	
	echo "Start Install $yellow Munin $reset Please Wait ... "
	sudo zypper -n install munin

	if [ -f "/etc/munin" ] && [ -f "/usr/lib/munin" ];then
		echo "tuned Installed [ OK ]"
	else
		echo "Error on tuned installation"
	fi
}



munin_remover(){

	sudo zypper -n remove FastCGI fcgiwrap fcgiwrap-nginx libdbi3 libfcgi0 librrd8 logdigest logtail munin munin-node perl-CGI perl-Crypt-DES perl-Crypt-Rijndael perl-Date-Manip perl-FastCGI perl-File-Copy-Recursive perl-File-Path perl-HTML-Template perl-IO-Socket-INET6 perl-Log-Log4perl perl-Net-Server perl-Net-SNMP perl-rrdtool perl-Socket6 rrdtool spawn-fcgi sysstat

	echo "All Dependencies Removed From System [ OK ]"
}

terraform(){


	echo "Start Install $yellow Terraform $reset Please Wait ... "
	echo "This Will be Install Packages Below : "
	echo "1- terraform"
	echo "2- terraform-provider-openstack"
	echo "3- terraform-provider-local"
	echo "4- terraform-provider-kubernetes"
	echo "5- terraform-provider-helm"
	echo "6- terraform-provider-aws"
	echo "7- terraform-provider-azurerm"
	
	sudo zypper -n install terraform
	sudo zypper -n install terraform-provider-openstack
	sudo zypper -n install terraform-provider-local
	sudo zypper -n install terraform-provider-kubernetes
	sudo zypper -n install terraform-provider-helm
	sudo zypper -n install terraform-provider-aws
	sudo zypper -n install terraform-provider-azurerm


	if [ -f "/usr/bin/terraform" ];then
		echo "terraform Installed [ OK ]"
	else
		echo "Error on terraform installation"
	fi
}



terraform_remover(){
	sudo zypper -n remove "terraform*"
}



# Develper

develope(){



	echo "Start Install $yellow Tools for Developers and Ready to Develope and Start project $reset Please Wait ... "
	python36=`ls /usr/bin | grep -o "^python3.6"` # check python version for 3.6
	python39=`ls /usr/bin | grep -o "^python3.9"` # check python version for 3.9 
	if [ "$python36" != "3.6" ];then
		sudo zypper -n install python39
		sudo pip3.9 install virtualenv
		if [ -f "/usr/bin/code" ];then
			code --install-extension ajanuw.bs5
			code --install-extension cstrap.flask-snippets
			code --install-extension ecmel.vscode-html-css
			code --install-extension WyattFerguson.jinja2-snippet-kit
			code --install-extension donjayamanne.jquerysnippets
			code --install-extension tushortz.python-extended-snippets
			code --install-extension KevinRose.vsc-python-indent
			code --install-extension ms-vscode.cpptools
			code --install-extension rogalmic.bash-debug
		else
			vscode
			
			code --install-extension ajanuw.bs5
			code --install-extension cstrap.flask-snippets
			code --install-extension ecmel.vscode-html-css
			code --install-extension WyattFerguson.jinja2-snippet-kit
			code --install-extension donjayamanne.jquerysnippets
			code --install-extension tushortz.python-extended-snippets
			code --install-extension KevinRose.vsc-python-indent
			code --install-extension ms-vscode.cpptools
			code --install-extension rogalmic.bash-debug
		fi
	elif  [ "$python39" == "3.9" ];then
		sudo pip3.9 install virtualenv
		if [ -f "/usr/bin/code" ];then
			code --install-extension ajanuw.bs5
			code --install-extension cstrap.flask-snippets
			code --install-extension ecmel.vscode-html-css
			code --install-extension WyattFerguson.jinja2-snippet-kit
			code --install-extension donjayamanne.jquerysnippets
			code --install-extension tushortz.python-extended-snippets
			code --install-extension KevinRose.vsc-python-indent
			code --install-extension ms-vscode.cpptools
			code --install-extension rogalmic.bash-debug

		else
			vscode
			
			code --install-extension ajanuw.bs5
			code --install-extension cstrap.flask-snippets
			code --install-extension ecmel.vscode-html-css
			code --install-extension WyattFerguson.jinja2-snippet-kit
			code --install-extension donjayamanne.jquerysnippets
			code --install-extension tushortz.python-extended-snippets
			code --install-extension KevinRose.vsc-python-indent
			code --install-extension ms-vscode.cpptools
			code --install-extension rogalmic.bash-debug
		fi
	else
		echo "Error on Installtin Python"
		echo "1- Check python Version"
		echo "2- Try install python3.9 Manuallly"
		

	fi

}

# Develper

develope_remover(){

	version_check=`python3 --version | grep -o "3.6*"`
	if [ "$version_check" == "3.6" ];then
		sudo zypper -n  uninstall python39
		sudo pip3.9 uninstall virtualenv
		if [ -f "/usr/bin/code" ];then
			code --uninstall-extension ajanuw.bs5
			code --uninstall-extension cstrap.flask-snippets
			code --uninstall-extension ecmel.vscode-html-css
			code --uninstall-extension WyattFerguson.jinja2-snippet-kit
			code --uninstall-extension donjayamanne.jquerysnippets
			code --uninstall-extension tushortz.python-extended-snippets
			code --uninstall-extension KevinRose.vsc-python-indent
			code --uninstall-extension ms-vscode.cpptools
			code --uninstall-extension rogalmic.bash-debug
		else
			vscode

			code --uninstall-extension ajanuw.bs5
			code --uninstall-extension cstrap.flask-snippets
			code --uninstall-extension ecmel.vscode-html-css
			code --uninstall-extension WyattFerguson.jinja2-snippet-kit
			code --uninstall-extension donjayamanne.jquerysnippets
			code --uninstall-extension tushortz.python-extended-snippets
			code --uninstall-extension KevinRose.vsc-python-indent
			code --uninstall-extension ms-vscode.cpptools
			code --uninstall-extension rogalmic.bash-debug
		fi
	else
		if [ -f "/usr/bin/code" ];then
			code --uninstall-extension ajanuw.bs5
			code --uninstall-extension cstrap.flask-snippets
			code --uninstall-extension ecmel.vscode-html-css
			code --uninstall-extension WyattFerguson.jinja2-snippet-kit
			code --uninstall-extension donjayamanne.jquerysnippets
			code --uninstall-extension tushortz.python-extended-snippets
			code --uninstall-extension KevinRose.vsc-python-indent
			code --uninstall-extension ms-vscode.cpptools
			code --uninstall-extension rogalmic.bash-debug
		else
			vscode

			code --uninstall-extension ajanuw.bs5
			code --uninstall-extension cstrap.flask-snippets
			code --uninstall-extension ecmel.vscode-html-css
			code --uninstall-extension WyattFerguson.jinja2-snippet-kit
			code --uninstall-extension donjayamanne.jquerysnippets
			code --uninstall-extension tushortz.python-extended-snippets
			code --uninstall-extension KevinRose.vsc-python-indent
			code --uninstall-extension ms-vscode.cpptools
			code --uninstall-extension rogalmic.bash-debug
		fi
	fi


}





openstack(){


	echo "Start Install $yellow OpenStack  $reset Please Wait ... "
	# You can install OpenStack by using packages on openSUSE Leap 42.3, openSUSE Leap 15, 
	# SUSE Linux Enterprise Server 12 SP4, SUSE Linux Enterprise Server 15 
	# through the Open Build Service Cloud repository
	
	sudo zypper -n install openstack

}




openstack_remover(){

	sudo zypper -n remove "openstack*"
}





# KYGnus Softwares
# In this section, I wrote my own open source software.
# To learn about the software, you can go to the following address
# https://github.com/KooshaYeganeh


admin_fstep(){

	echo "Start Install $yellow Admin First Step  $reset Please Wait ... "

	sudo zypper -n install lshw
	sudo zypper -n install demidecode
	
	cd /tmp	
	mkdir KYGnus
	cd KYGnus
	wget https://github.com/KooshaYeganeh/Admin_Fstep/archive/refs/heads/main.zip
	if [ -f "/tmp/KYGnus/main.zip" ];then

		unzip main.zip
		cd Admin_Fstep-main
		sudo mv Fstep /usr/bin
		cd
		rm -rf /tmp/KYGnus
		rm /tmp/main.zip
		sleep 2
		echo "$red Note : You Should Run this Script with sudo $reset"
		echo "Admin FStep Installed $green [ OK ] $reset"
	else
		echo "$red Sorry.Can Not Get File From Source $reset"
		echo "$red check Network Connection and Try Again $reset"
	fi
}



admin_fstep_remover(){

	sudo rm /usr/bin/Fstep
	echo "Admin FStep Removed $green [ OK ] $reset"
}


# Scan your WordPress WebSite Simply
# Scan Your Remote system with Local AV

wpscan(){

	echo "Start Install $yellow WordPress Scanner $reset Please Wait ... "
	cd /tmp
	mkdir KYGnus
	cd KYGnus
	wget https://github.com/KooshaYeganeh/WPscan/archive/refs/heads/main.zip
	if [ -f "/tmp/KYGnus/main.zip" ];then
		unzip main.zip
		cd WPscan-main
		./install
		sudo mv wpscan /usr/bin
		rm -rf /tmp/KYGnus
		rm /tmp/main.zip
		cd
		sleep 1
		echo "Wpscan Installed $green [ OK ] $reset"
	else
		echo "$red Sorry.Can Not Get File From Source $reset"
		echo "$red check Network Connection and Try Again $reset"
	fi



}


wpscan_remover(){

	sudo rm /usr/bin/wpscan
	echo "Wpscan Removed $green [ OK ] $reset"

}


kygnus_guard(){

	echo "Start Install $yellow KYGnus Guard $reset Please Wait ... "

	cd /tmp
	echo "Create Directory for Project in /tmp"
	mkdir KYGnus
	cd KYGnus
	wget https://github.com/KooshaYeganeh/KYGnus-Guard-community/archive/refs/heads/main.zip

	if [ -f "/tmp/KYGnus/main.zip" ];then
		unzip main.zip && mv KYGnus-Guard-community-main KYGnus_Guard
		sudo mv KYGnus_Guard /opt
		cd /opt/KYGnus_Guard
		
		# Create SoftLink From Main .sh File
		cd /usr/bin
		sudo ln -s /opt/KYGnus_Guard/KYGnus_Guard.sh KYGnus_Guard
		cd /opt/KYGnus_Guard
		
		sudo pip3 install -r requirements.txt
		if [ -f "/usr/local/bin/virtualenv" ];then
			echo "virtualenv Not Installed on system"
			sudo pip3 install virtualenv
		else
			echo "virtualenv is already installed in the system $green[ OK ]$reset"

		fi
		echo "Did you Get an error during the installation process?"

		read response
		if [ "$response" == "y" ] || [ "$response" == "Y" ];then
			./pkg
		else
			true
		fi
		
		sudo zypper -n intall restorecond policycoreutils setools-console

		# check Mariadb Installed on system
		if [ -f "/usr/bin/mariadb" ] || [ -f "/usr/bin/mysql" ];then
			mariadb_status=`sudo systemctl status mariadb | grep -o  "Active: active"`
			if [ "$mariadb_status" == "Active: active" ];then
				mariadb --execute="create database malware;"
				mariadb -u root -p  malware < malware.sql
				./insert_mysql
			else
				echo "MariaDB is Not Active and I Try to Start MariaDB"
				sudo systemctl start mariadb
				sudo systemctl enable mariadb
				mariadb --execute="create database malware;"
				mariadb -u root -p  malware < malware.sql
				./insert_mysql
			fi
		else
			echo "MariaDB is Not Installed"
			echo "I try to Install Mariadb10"
			mariadb
			sudo mariadb_secure_installation
			printf "Enter Username for MariaDB: "
			read mysql_user
			printf "Enter Password for MariaDB: "
			read mysql_pass
			sudo mariadb --execute="GRANT ALL ON *.* TO '$mysql_user'@'localhost' IDENTIFIED BY '$mysql_pass' WITH GRANT OPTION;"
			sudo mariadb --execute="FLUSH PRIVILEGES;"
			sudo systemctl start mariadb
			mariadb --execute="create database malware;"
			mariadb -u root -p malware < malware.sql
			./insert_mysql

		fi



		# Create Service File 
		sudo cp KYGnus_Guard.service  /etc/systemd/system directory
		cd /etc/systemd/system/
		sudo systemctl enable --now KYGnus_Guard.service
		cd
		# Create Log File and log Directory
		
		cd /var/log
		sudo mkdir KYGnus_Guard
		cd KYGnus_Guard
		ln -s /opt/KYGnus-Guard-community-main/Log/KYGnus_Guard.log KYGnus_Guard.log
		cd

		# Create config File and Config Dirtectory
		cd /etc
		sudo mkdir KYGnus_Guard
		cd KYGnus_Guard
		ln -s /opt/KYGnus-Guard-community-main/config.py KYGnus_Guard.conf

		# For Better Security Run This command
		sudo iptables -t filter -A INPUT -p tcp -i any --dport 8080 -j DROP

	else
		wget https://github.com/KooshaYeganeh/KYGnus-Guard-community/archive/refs/heads/main.zip
		unzip main.zip && mv KYGnus-Guard-community-main KYGnus_Guard
		sudo mv KYGnus_Guard /opt
		cd /opt/KYGnus_Guard

		cd /usr/bin
		sudo ln -s /opt/KYGnus_Guard/KYGnus_Guard.sh KYGnus_Guard
		cd /opt/KYGnus_Guard
		
		sudo pip3 install -r requirements.txt
		if [ -f "/usr/local/bin/virtualenv" ];then
			echo "virtualenv Not Installed on system"
			sudo pip3 install virtualenv
		else
			echo "virtualenv is already installed in the system $green[ OK ]$reset"

		fi
		echo "Did you Get an error during the installation process?"

		read response
		if [ "$response" == "y" ] || [ "$response" == "Y" ];then
			./pkg
		else
			true
		fi
		
		sudo zypper -n intall restorecond policycoreutils setools-console

		# check Mariadb Installed on system
		if [ -f "/usr/bin/mariadb" ] || [ -f "/usr/bin/mysql" ];then
			mariadb_status=`sudo systemctl status mariadb | grep -o  "Active: active"`
			if [ "$mariadb_status" == "Active: active" ];then
				mariadb --execute="create database malware;"
				mariadb -u root -p  malware < malware.sql
				./insert_mysql
			else
				echo "MariaDB is Not Active and I Try to Start MariaDB"
				sudo systemctl start mariadb
				sudo systemctl enable mariadb
				mariadb --execute="create database malware;"
				mariadb -u root -p  malware < malware.sql
				./insert_mysql
			fi
		else
			echo "MariaDB is Not Installed"
			echo "I try to Install Mariadb10"
			mariadb
			sudo mariadb_secure_installation
			printf "Enter Username for MariaDB: "
			read mysql_user
			printf "Enter Password for MariaDB: "
			read mysql_pass
			sudo mariadb --execute="GRANT ALL ON *.* TO '$mysql_user'@'localhost' IDENTIFIED BY '$mysql_pass' WITH GRANT OPTION;"
			sudo mariadb --execute="FLUSH PRIVILEGES;"
			sudo systemctl start mariadb
			mariadb --execute="create database malware;"
			mariadb -u root -p malware < malware.sql
			./insert_mysql

		fi



		# Create Service File 
		sudo cp KYGnus_Guard.service  /etc/systemd/system directory
		cd /etc/systemd/system/
		sudo systemctl enable --now KYGnus_Guard.service
		cd
		# Create Log File and log Directory
		
		cd /var/log
		sudo mkdir KYGnus_Guard
		cd KYGnus_Guard
		ln -s /opt/KYGnus-Guard-community-main/Log/KYGnus_Guard.log KYGnus_Guard.log
		cd

		# Create config File and Config Dirtectory
		cd /etc
		sudo mkdir KYGnus_Guard
		cd KYGnus_Guard
		ln -s /opt/KYGnus-Guard-community-main/config.py KYGnus_Guard.conf

		# For Better Security Run This command
		sudo iptables -t filter -A INPUT -p tcp -i any --dport 8080 -j DROP


	fi	
}



kygnus_guard_remover(){

		sudo iptables -F
		cd /opt/KYGnus_Guard
		sudo pip3 uninstall -r requirements.txt
		cd ..
		sudo rm -rf KYGnus_Guard
		sudo rm /usr/bin/KYGnus_Guard.sh
		mysql --execute="DROP DATABASE malware;"
		sudo rm /etc/systemd/system/KYGnus_Guard.service
		sudo rm -rf /var/log/KYGnus_Guard
		sudo rm -rf /etc/KYGnus_Guard

		echo "$green KYGnus Guard Removed [ OK ] $reset"
}







Android_Malware_Detect_App()
{
	echo "check Android Debug Bridge Installed or Not for opensuse Leap 15.4"
	echo"sudo zypper addrepo https://download.opensuse.org/repositories/home:AndnoVember:test/15.4/home:AndnoVember:test.repo"
	echo "sudo zypper refresh"
	echo "sudo zypper -n install android-tools"
	echo "check This Link For More Details:https://github.com/KooshaYeganeh/AMD"

}

Android_Malware_Detect(){

	if [ -f "/usr/bin/adb" ];then
		if [ -f "/usr/bin/mariadb" ];then
			if [ -f "/usr/bin/python3.9" ];then
				sudo pip3.9 install virtualenv
				mkdir /home/$USER/AMD && cd /home/$USER/AMD
				wget https://github.com/KooshaYeganeh/AMD/archive/refs/heads/main.zip && unzip main.zip && mv AMD-main Source && cd Source && mv config.py.sample config.py && rm main.zip
				if [ -f "/usr/local/bin/virtualenv" ];then
					# check python virtualenv Installed on system
					virtualenv venv && source vemv/bin/activate
					pip3.9 install -r requirements.txt
					# Install python Packages
					sudo mv AMD /usr/bin
					# Create Softlink From config File
					sudo mkdir /etc/AMD && cd /etc/AMD && sudo ln -s /home/$USER/AMD/Source/config.py AMD.conf
					# check Passwqord and Username of cnf File of Mariadb To AutoLogin
					client=`cat /etc/my.cnf | grep -o "\[client\]"`
					cnf_user=`cat /etc/my.cnf | grep -o "user"`
					cnf_password=`cat /etc/my.cnf | grep -o "password"`

					if [ "$client" == "[client]" ] && \
					   [ "cnf_user" == "user" ] && \
					   [ "cnf_password" == "password" ];then
						mysql --execute="CREATE DATABASE Android_Malware;"
						mysql Android_Malware < ./Android_Malware.sql
					else
						printf "Enter mysql_user:"
						read mysql_user
						# Create Database and Restore Database 
						mysql -u $mysql_user -p --execute="CREATE DATABASE Android_Malware;"
						mysql -u $mysql_user -p Android_Malware < ./Android_Malware.sql
					fi
				else
					sudo pip3.9 install virtualenv
					virtualenv venv && source vemv/bin/activate
					pip3.9 install -r requirements.txt
					# Install python Packages
					sudo mv AMD /usr/bin
					# Create Softlink From config File
					sudo mkdir /etc/AMD && cd /etc/AMD && sudo ln -s /home/$USER/AMD/Source/config.py AMD.conf
					# check Passwqord and Username of cnf File of Mariadb To AutoLogin
					client=`cat /etc/my.cnf | grep -o "\[client\]"`
					cnf_user=`cat /etc/my.cnf | grep -o "user"`
					cnf_password=`cat /etc/my.cnf | grep -o "password"`

					if [ "$client" == "[client]" ] && \
					   [ "cnf_user" == "user" ] && \
					   [ "cnf_password" == "password" ];then
						mysql --execute="CREATE DATABASE Android_Malware;"
						mysql Android_Malware < ./Android_Malware.sql
					else
						printf "Enter mysql_user:"
						read mysql_user
						# Create Database and Restore Database 
						mysql -u $mysql_user -p --execute="CREATE DATABASE Android_Malware;"
						mysql -u $mysql_user -p Android_Malware < ./Android_Malware.sql
					
					fi
				fi
			else
				sudo zypper -n install python39
				sudo pip3.9 install virtualenv
				mkdir /home/$USER/AMD && cd /home/$USER/AMD
				wget https://github.com/KooshaYeganeh/AMD/archive/refs/heads/main.zip && unzip main.zip && mv AMD-main Source && cd Source && mv config.py.sample config.py && rm main.zip

				virtualenv venv && source vemv/bin/activate
				pip3.9 install -r requirements.txt
				# Install python Packages
				sudo mv AMD /usr/bin
				# Create Softlink From config File
				sudo mkdir /etc/AMD && cd /etc/AMD && sudo ln -s /home/$USER/AMD/Source/config.py AMD.conf
				# check Passwqord and Username of cnf File of Mariadb To AutoLogin
				client=`cat /etc/my.cnf | grep -o "\[client\]"`
				cnf_user=`cat /etc/my.cnf | grep -o "user"`
				cnf_password=`cat /etc/my.cnf | grep -o "password"`

				if [ "$client" == "[client]" ] && \
					[ "cnf_user" == "user" ] && \
					[ "cnf_password" == "password" ];then
					mysql --execute="CREATE DATABASE Android_Malware;"
					mysql Android_Malware < ./Android_Malware.sql
				else
					printf "Enter mysql_user:"
					read mysql_user
					# Create Database and Restore Database 
					mysql -u $mysql_user -p --execute="CREATE DATABASE Android_Malware;"
					mysql -u $mysql_user -p Android_Malware < ./Android_Malware.sql
				fi
			fi
		else
			maradb
			if [ -f "/usr/bin/python3.9" ];then
				sudo pip3.9 install virtualenv
				mkdir /home/$USER/AMD && cd /home/$USER/AMD
				wget https://github.com/KooshaYeganeh/AMD/archive/refs/heads/main.zip && unzip main.zip && mv AMD-main Source && cd Source && mv config.py.sample config.py && rm main.zip
				if [ -f "/usr/local/bin/virtualenv" ];then
					# check python virtualenv Installed on system
					virtualenv venv && source vemv/bin/activate
					pip3.9 install -r requirements.txt
					# Install python Packages
					sudo mv AMD /usr/bin
					# Create Softlink From config File
					sudo mkdir /etc/AMD && cd /etc/AMD && sudo ln -s /home/$USER/AMD/Source/config.py AMD.conf
					# check Passwqord and Username of cnf File of Mariadb To AutoLogin
					client=`cat /etc/my.cnf | grep -o "\[client\]"`
					cnf_user=`cat /etc/my.cnf | grep -o "user"`
					cnf_password=`cat /etc/my.cnf | grep -o "password"`

					if [ "$client" == "[client]" ] && \
					   [ "cnf_user" == "user" ] && \
					   [ "cnf_password" == "password" ];then
						mysql --execute="CREATE DATABASE Android_Malware;"
						mysql Android_Malware < ./Android_Malware.sql
					else
						printf "Enter mysql_user:"
						read mysql_user
						# Create Database and Restore Database 
						mysql -u $mysql_user -p --execute="CREATE DATABASE Android_Malware;"
						mysql -u $mysql_user -p Android_Malware < ./Android_Malware.sql
					fi
				else
					sudo pip3.9 install virtualenv
					virtualenv venv && source vemv/bin/activate
					pip3.9 install -r requirements.txt
					# Install python Packages
					sudo mv AMD /usr/bin
					# Create Softlink From config File
					sudo mkdir /etc/AMD && cd /etc/AMD && sudo ln -s /home/$USER/AMD/Source/config.py AMD.conf
					# check Passwqord and Username of cnf File of Mariadb To AutoLogin
					client=`cat /etc/my.cnf | grep -o "\[client\]"`
					cnf_user=`cat /etc/my.cnf | grep -o "user"`
					cnf_password=`cat /etc/my.cnf | grep -o "password"`

					if [ "$client" == "[client]" ] && \
					   [ "cnf_user" == "user" ] && \
					   [ "cnf_password" == "password" ];then
						mysql --execute="CREATE DATABASE Android_Malware;"
						mysql Android_Malware < ./Android_Malware.sql
					else
						printf "Enter mysql_user:"
						read mysql_user
						# Create Database and Restore Database 
						mysql -u $mysql_user -p --execute="CREATE DATABASE Android_Malware;"
						mysql -u $mysql_user -p Android_Malware < ./Android_Malware.sql
					
					fi
				fi
			else
				sudo zypper -n install python39
				sudo pip3.9 install virtualenv
				mkdir /home/$USER/AMD && cd /home/$USER/AMD
				wget https://github.com/KooshaYeganeh/AMD/archive/refs/heads/main.zip && unzip main.zip && mv AMD-main Source && cd Source && mv config.py.sample config.py && rm main.zip

				virtualenv venv && source vemv/bin/activate
				pip3.9 install -r requirements.txt
				# Install python Packages
				sudo mv AMD /usr/bin
				# Create Softlink From config File
				sudo mkdir /etc/AMD && cd /etc/AMD && sudo ln -s /home/$USER/AMD/Source/config.py AMD.conf
				# check Passwqord and Username of cnf File of Mariadb To AutoLogin
				client=`cat /etc/my.cnf | grep -o "\[client\]"`
				cnf_user=`cat /etc/my.cnf | grep -o "user"`
				cnf_password=`cat /etc/my.cnf | grep -o "password"`

				if [ "$client" == "[client]" ] && \
					[ "cnf_user" == "user" ] && \
					[ "cnf_password" == "password" ];then
					mysql --execute="CREATE DATABASE Android_Malware;"
					mysql Android_Malware < ./Android_Malware.sql
				else
					printf "Enter mysql_user:"
					read mysql_user
					# Create Database and Restore Database 
					mysql -u $mysql_user -p --execute="CREATE DATABASE Android_Malware;"
					mysql -u $mysql_user -p Android_Malware < ./Android_Malware.sql
				fi
			fi
		fi
	else
		adb
			maradb
			if [ -f "/usr/bin/python3.9" ];then
				sudo pip3.9 install virtualenv
				mkdir /home/$USER/AMD && cd /home/$USER/AMD
				wget https://github.com/KooshaYeganeh/AMD/archive/refs/heads/main.zip && unzip main.zip && mv AMD-main Source && cd Source && mv config.py.sample config.py && rm main.zip
				if [ -f "/usr/local/bin/virtualenv" ];then
					# check python virtualenv Installed on system
					virtualenv venv && source vemv/bin/activate
					pip3.9 install -r requirements.txt
					# Install python Packages
					sudo mv AMD /usr/bin
					# Create Softlink From config File
					sudo mkdir /etc/AMD && cd /etc/AMD && sudo ln -s /home/$USER/AMD/Source/config.py AMD.conf
					# check Passwqord and Username of cnf File of Mariadb To AutoLogin
					client=`cat /etc/my.cnf | grep -o "\[client\]"`
					cnf_user=`cat /etc/my.cnf | grep -o "user"`
					cnf_password=`cat /etc/my.cnf | grep -o "password"`

					if [ "$client" == "[client]" ] && \
					   [ "cnf_user" == "user" ] && \
					   [ "cnf_password" == "password" ];then
						mysql --execute="CREATE DATABASE Android_Malware;"
						mysql Android_Malware < ./Android_Malware.sql
					else
						printf "Enter mysql_user:"
						read mysql_user
						# Create Database and Restore Database 
						mysql -u $mysql_user -p --execute="CREATE DATABASE Android_Malware;"
						mysql -u $mysql_user -p Android_Malware < ./Android_Malware.sql
					fi
				else
					sudo pip3.9 install virtualenv
					virtualenv venv && source vemv/bin/activate
					pip3.9 install -r requirements.txt
					# Install python Packages
					sudo mv AMD /usr/bin
					# Create Softlink From config File
					sudo mkdir /etc/AMD && cd /etc/AMD && sudo ln -s /home/$USER/AMD/Source/config.py AMD.conf
					# check Passwqord and Username of cnf File of Mariadb To AutoLogin
					client=`cat /etc/my.cnf | grep -o "\[client\]"`
					cnf_user=`cat /etc/my.cnf | grep -o "user"`
					cnf_password=`cat /etc/my.cnf | grep -o "password"`

					if [ "$client" == "[client]" ] && \
					   [ "cnf_user" == "user" ] && \
					   [ "cnf_password" == "password" ];then
						mysql --execute="CREATE DATABASE Android_Malware;"
						mysql Android_Malware < ./Android_Malware.sql
					else
						printf "Enter mysql_user:"
						read mysql_user
						# Create Database and Restore Database 
						mysql -u $mysql_user -p --execute="CREATE DATABASE Android_Malware;"
						mysql -u $mysql_user -p Android_Malware < ./Android_Malware.sql
					
					fi
				fi
			else
				sudo zypper -n install python39
				sudo pip3.9 install virtualenv
				mkdir /home/$USER/AMD && cd /home/$USER/AMD
				wget https://github.com/KooshaYeganeh/AMD/archive/refs/heads/main.zip && unzip main.zip && mv AMD-main Source && cd Source && mv config.py.sample config.py && rm main.zip

				virtualenv venv && source vemv/bin/activate
				pip3.9 install -r requirements.txt
				# Install python Packages
				sudo mv AMD /usr/bin
				# Create Softlink From config File
				sudo mkdir /etc/AMD && cd /etc/AMD && sudo ln -s /home/$USER/AMD/Source/config.py AMD.conf
				# check Passwqord and Username of cnf File of Mariadb To AutoLogin
				client=`cat /etc/my.cnf | grep -o "\[client\]"`
				cnf_user=`cat /etc/my.cnf | grep -o "user"`
				cnf_password=`cat /etc/my.cnf | grep -o "password"`

				if [ "$client" == "[client]" ] && \
					[ "cnf_user" == "user" ] && \
					[ "cnf_password" == "password" ];then
					mysql --execute="CREATE DATABASE Android_Malware;"
					mysql Android_Malware < ./Android_Malware.sql
				else
					printf "Enter mysql_user:"
					read mysql_user
					# Create Database and Restore Database 
					mysql -u $mysql_user -p --execute="CREATE DATABASE Android_Malware;"
					mysql -u $mysql_user -p Android_Malware < ./Android_Malware.sql
				fi
			fi
		fi	

}
	


clone_disk(){


	echo "Start Install $yellow Clone Disk $reset Please Wait ... "
	cd /tmp 
	mkdir KYGnus
	cd KYGnus
	wget https://github.com/KooshaYeganeh/clone-disk/archive/refs/heads/main.zip 
	if [ -f "/tmp/KYGnus/main.zip" ];then
		
		unzip main.zip 
		cd clone-disk-main 
		sudo mv clone /usr/bin 
		cd
		rm -rf /tmp/KYGnus
		rm -f /tmp/main.zip
		if [ -f "/usr/bin/clone" ];then
			echo "Clone Disk Insatlled [ OK ]"
		else
			echo "Error on Clone_Disk Installation"
		fi
	else
		echo "Sorry.Can Not Get File From Sourec ERROR !!!!"
		echo "check Network Connection and Try Again"

	fi

}	

clone_disk_remover(){

	rm /usr/bin/clone
	echo "$green Clone Disk Removed [ OK ]"


}




perm_check(){

	echo "Start Install $yellow Permission check  $reset Please Wait ... "
	cd /tmp 
	mkdir KYGnus
	cd KYGnus
	wget https://github.com/KooshaYeganeh/perm_check/archive/refs/heads/main.zip
	if [ -f "/tmp/KYGnus/main.zip" ];then
		
		unzip main.zip 
		cd perm_check-main
		sudo mv permcheck /usr/bin
		cd
		rm -rf /tmp/KYGnus
		rm -f /tmp/main.zip
		if [ -f "/usr/bin/clone" ];then
			echo "Clone Disk Insatlled [ OK ]"
		else
			echo "Error on Perm_check Installation"
		fi
	else
		echo "Sorry.Can Not Get File From Sourec ERROR !!!!"
		echo "check Network Connection and Try Again"

	fi



}


perm_check_remover(){

	rm /usr/bin/permcheck
	echo "$green permcheck Removed [ OK ]"
}


lv(){


	echo "Start Install $yellow Linux Verfication $reset Please Wait ... "
	cd /tmp 
	mkdir KYGnus
	cd KYGnus
	wget https://github.com/KooshaYeganeh/Linux_Verification/archive/refs/heads/main.zip
	if [ -f "/tmp/KYGnus/main.zip" ];then
		
		unzip main.zip 
		cd Linux_Verification-main
		sudo mv LV /usr/bin/
		cd
		rm -rf /tmp/KYGnus
		rm -f /tmp/main.zip
		if [ -f "/usr/bin/LV" ];then
			echo "Linux Verfication Insatlled [ OK ]"
		else
			echo "Error on Perm_check Installation"
		fi
	else
		echo "Sorry.Can Not Get File From Sourec ERROR !!!!"
		echo "check Network Connection and Try Again"

	fi


}


lv_remove(){

	sudo rm /usr/bin/LV
	echo "$green Linux Verfication Removed [ OK ]"
}




fs(){


	echo "Start Install $yellow FileSort $reset Please Wait ... "
	cd /tmp 
	mkdir KYGnus
	cd KYGnus
	wget https://github.com/KooshaYeganeh/FS/archive/refs/heads/main.zip
	if [ -f "/tmp/KYGnus/main.zip" ];then
		
		unzip main.zip 
		cd FS-main
		sudo mv FS-sort /usr/bin
		cd
		rm -rf /tmp/KYGnus
		rm -f /tmp/main.zip
		if [ -f "/usr/bin/FS-sort" ];then
			echo "FS Insatlled [ OK ]"
		else
			echo "Error on FS Installation"
		fi
	else
		echo "Sorry.Can Not Get File From Sourec ERROR !!!!"
		echo "check Network Connection and Try Again"

	fi

}




fs_remover(){


	sudo rm /usr/bin/Fs-sort
	if [ -f "/usr/bin/FS-sort" ];then
		echo "FS-sort Removed [ OK ]"
	else
		echo " Error When Removing Fs-sort Files "
	fi
}



KYGnus_Backup(){

	echo "Start Install $yellow KYGnus Backup  $reset Please Wait ... "

	cd /tmp 
	mkdir KYGnus
	cd KYGnus
	wget https://github.com/KooshaYeganeh/KYGnus-Backup/archive/refs/heads/main.zip
	if [ -f "/tmp/KYGnus/main.zip" ];then
		
		unzip main.zip 
		cd KYGnus-Backup-main
		sudo mv KYGnus_Backup /usr/bin
		cd
		rm -rf /tmp/KYGnus
		rm -f /tmp/main.zip
		if [ -f "/usr/bin/KYGnus_Backup" ];then
			echo "KYGnus_Backup Insatlled [ OK ]"
			echo "add This cron */3 * * *  to Better Funtionality or edit with Your choice"
		else
			echo "Error on KYGnus_Backup Installation"
		fi
	else
		echo "Sorry.Can Not Get File From Sourec ERROR !!!!"
		echo "check Network Connection and Try Again"

	fi
}



KYGnus_Backup_remover(){

	sudo rm /usr/bin/KYGnus_Backup
	if [ -f "/usr/bin/KYGnus_Backup" ];then
		echo "KYGnus_Backup Removed [ OK ]"
	else
		echo "Error When Removing Fs-sort Files"
	fi

}



exifremover(){


	echo "Start Install $yellow ExifRemover  $reset Please Wait ... "
	if [ -f "/usr/bin/exiftool" ];then
		wget https://github.com/KooshaYeganeh/exif_remover/archive/refs/heads/main.zip
		if [ -f "/tmp/KYGnus/main.zip" ];then
			
			unzip main.zip 
			cd exif_remover-main
			sudo mv exifremover /usr/bin
			cd
			rm -rf /tmp/KYGnus
			rm -f /tmp/main.zip
			if [ -f "/usr/bin/exifremover" ];then
				echo "exifremover Insatlled [ OK ]"
			else
				echo "Error on exifremover Installation"
			fi
		else
			echo "Sorry.Can Not Get File From Sourec ERROR !!!!"
			echo "check Network Connection and Try Again"

		fi
	else
		
		sudo zypper -n install exiftool
		wget https://github.com/KooshaYeganeh/exif_remover/archive/refs/heads/main.zip
		if [ -f "/tmp/KYGnus/main.zip" ];then
			
			unzip main.zip 
			cd exif_remover-main
			sudo mv exifremover /usr/bin
			cd
			rm -rf /tmp/KYGnus
			rm -f /tmp/main.zip
			if [ -f "/usr/bin/exifremover" ];then
				echo "exifremover Insatlled [ OK ]"
			else
				echo "Error on exifremover Installation"
			fi
		else
			echo "Sorry.Can Not Get File From Sourec ERROR !!!!"
			echo "check Network Connection and Try Again"

		fi
	fi


}	

exiremover_remover(){
	sudo rm -rf /usr/bin/exifremover
	sudo zypper -n remove exiftool
}




antideface(){
		
		
		echo "Start Install $yellow AntiDeface $reset Please Wait ... "
		wget https://github.com/KooshaYeganeh/AntiDeface/archive/refs/heads/main.zip
		if [ -f "/tmp/KYGnus/main.zip" ];then
			
			unzip main.zip 
			cd AntiDeface-main
			chmod 755 AntiDeface
			sudo mv AntiDeface /usr/bin
			cd
			rm -rf /tmp/KYGnus
			rm -f /tmp/main.zip
			if [ -f "/usr/bin/AntiDeface" ];then
				echo "AntiDeface Insatlled [ OK ]"
			else
				echo "Error on AntiDeface Installation"
				echo "$yellow I recommend that you add this script to the cron system file as needed $reset"
			fi
		else
			echo "Sorry.Can Not Get File From Sourec ERROR !!!!"
			echo "check Network Connection and Try Again"

		fi
}

antideface_remover(){
	sudo rm /usr/bin/AntiDeface
	echo "if You add cron Remove it"
}


list_app(){
	
	echo "Find installed Apps in System"
	sleep 2
	zypper search --installed-only
	echo "Done"


}



man(){

	echo "suse Package Manager"
	echo "suse <command> "
	echo "--whereis : Each software shows in which repository it is located or which repositories provide this software. "
	echo "> example : suse --whereis vlc"
	echo "************************************************"
	echo "--howinstall : It shows the installation steps. It shows which steps you should go through to install the relevant software on your system."
	echo "> example : suse --howinstall vlc"
	echo "************************************************"
	echo "--info : show information"
	echo "> example : suse --info"
	echo "************************************************"
	echo "man : suse man ; show manuals"
	echo "************************************************"
	echo "--install : use this command to install a software"
	echo "> exapmle : suse install vscode"
	echo "************************************************"
	echo "--remove : use this command to remove a software and try to remove dependencies"
	echo "> example: suse --remove"
	echo "************************************************"
	echo "--remove <app> --clean-unneed : remove + clean_unnneded"
	echo "> example: suse --remove"
	echo "************************************************"
	echo "--list-app : List Installed apps "
	echo "example : suse --list-app"
	echo "************************************************"
	echo "--search-app : Serach in installed Apps"
	echo "> example : suse --search-app vlc"
	echo "************************************************"
	echo "--clean-unneed : clean out all unneeded autoinstalled dependencies "
    echo "> exmple : suse --clean-unneed"
	echo "************************************************"
	echo "--suport-sytems : Which distributions does this package manager support"
    echo "> example : suse --support-systems"
	echo "************************************************"
	echo "--list-repository : list of repositories in system" 
	echo "> example : suse --list-repo"
	echo "************************************************"
	echo "--list --known <app name> : Known Apps to suse" 
	echo "> example : suse --list --known security"
	echo "************************************************"
	echo "--update : update Packages "
	echo "> example : suse --update"
	echo "************************************************"
	echo "--upgrade : upgrade packages "
    echo "> example : suse --upgrade"
	echo "************************************************"
	echo "--dist-upgrade : Distribution Upgrade "
	echo "> example : suse --dist-upgrade"
	echo "************************************************"
	echo "--document : show recomended Documents Links "
	echo "> example : suse --document clamav"

}





if [ "$0" == "./suse" ];then
	if [ "$1" == "--whereis" ];then
		if [ "$2" == "android_tools" ] || [ "$2" == "android tools" ] || \
			[ "$2" == "Android Tools" ] || [ "$2" == "Android_Tools" ];then
				android_tools_repo	
		
		elif [ "$2" == "vlc" ] || [ "$2" == "VLC" ];then
			vlc_repo 

		elif [ "$2" == "vscode" ] || [ "$2" == "VSCODE" ] || \
			[ "$2" == "code" ] || [ "$2" == "CODE" ] || \
				[ "$2" == "visual_stdio_code" ] || [ "$2" == "visual stdio code" ];then
					vscode_repo 
		elif [ "$2" == "codec" ] || [ "$2" == "CODEC" ] || \
			[ "$2" == "multimedia codec" ] || [ "$2" == "multimedia_codec" ] || \
				[ "$2" == "MultiMedia Codec" ] || [ "$2" == "MultiMedia_Codec" ];then
					codec_repo

		elif [ "$2" == "mariadb" ] || [ "$2" == "Mariadb" ] || \
			[ "$2" == "mariaDB" ] || [ "$2" == "MariaDB" ];then
				mariadb_repo

		elif [ "$2" == "postgre" ] || [ "$2" == "Postgre" ] || \
			[ "$2" == "postgresql" ] || [ "$2" == "postgreSQL" ] || \
			[ "$2" == "PostgreSQL" ];then
				postgre_repo
		elif [ "$2" == "multimedia_codec" ] || [ "$2" == "MultiMedia_Codec" ] || \
				[ "$2" == "multimediacodec" ] || [ "$2" == "MultimediaCodec" ] || \
					[ "$2" == "codec" ] || [ "$2" == "Codec" ];then
						mediacodec_repo
		elif [ "$2" == "clamAV" ] || [ "$2" == "clamav" ] || \
			[ "$2" == "CLAMAV" ];then
				clamav_repo

		fi
	elif [ "$1" == "--howinstall" ];then
		if [ "$2" == "android_tools" ] || [ "$2" == "Android_Tools" ];then
			android_tools_app
		elif [ "$2" == "mariadb" ] || [ "$2" == "Mariadb" ] || \
			[ "$2" == "mariaDB" ] || [ "$2" == "MariaDB" ];then
				mariadb_app

		elif [ "$2" == "postgre" ] || [ "$2" == "Postgre" ] || \
			[ "$2" == "postgresql" ] || [ "$2" == "postgreSQL" ] || \
				[ "$2" == "PostgreSQL" ];then
					postgre_app

		elif [ "$2" == "vlc" ] || [ "$2" == "VLC" ];then
			vlc_app
		
		elif [ "$2" == "vscode" ] || [ "$2" == "VSCODE" ] || \
			[ "$2" == "code" ] || [ "$2" == "CODE" ] || \
			[ "$2" == "visual_stdio_code" ] || [ "$2" == "visual stdio code" ];then
				vscode_app
		
		elif [ "$2" == "codec" ] || [ "$2" == "CODEC" ] || \
			[ "$2" == "multimedia_codec" ] || [ "$2" == "MultiMedia_Codec" ];then
					codec_app
		elif [ "$2" == "clamAV" ] || [ "$2" == "clamav" ] || \
			[ "$2" == "CLAMAV" ];then
				clamav_app
		elif [ "$2" == "amd" ] || [ "$2" == "AMD" ] || \
			[ "$2" == "Android_Malware_Detect" ] || [ "$2" == "android_malware_detect" ] || \
				[ "$2" == "AndroidMalwareDetect" ];then
					Android_Malware_Detect_App

		fi
	
	elif [ "$1" == "--list-app" ];then
		list_app

	elif [ "$1" == "--clean-unneed" ] || [ "$1" == "--remove-unneed" ] || \
			[ "$1" == "--purge" ];then
				remove_unneeded

	elif [ "$1" == "--help" ] || [ "$1" == "--Help" ] || \
		[ "$1" == "--HELP" ] || [ "$1" == "man" ] || \
		[ "$1" == "manual" ];then
			man
	
	elif [ "$1" == "--info" ] || [ "$1" == "--INFO" ] || \
		[ "$1" == "--Info" ];then
			info


	elif [ "$1" == "--search-app" ];then
		rpm -qa | grep $2

	elif [ "$1" == "--update" ];then
		update
	
	elif [ "$1" == "--upgrade" ];then
		upgrade

	elif [ "$1" == "dist-upgrade" ];then
		dist_upgrade



	elif [ "$1" == "--app-count" ];then
		app_count=`rpm -qa | wc -l`
		echo "Number of Installed App : $app_count"



	elif [ "$1" == "--list-repository" ];then
			list_repo



	# List Known Apps
	# This part shows the user what software knows about the searched item.
	# Like Security Tools or Image Tools or App name
	elif [ "$1" == "--list" ];then
		if [ "$2" == "--known" ];then
			if [ "$3" == "Security-Tools" ] || [ "$3" == "securitytools" ] || [ "$3" == "security-tools" ] || \
				[ "$3" == "Security_Tools" ] || [ "$3" == "security_tools" ] || \
				[ "$3" == "SecurityTools" ] || [ "$3" == "securitytools" ];then
					echo "=> clamAV - Rkhunter - Maldet - Lynis"
					echo "=> Fail2ban - Firewalld - Nmap - TcpDump - Wireshark "
					echo "=> WAF ( Web Application Firewall )=> ModSecurity - Nginx-Modsecurity"
					echo "=> USBGuard - TcpWrappers"
			elif [ "$3" == "Database" ] || [ "$3" == "database" ];then
					echo "=> MariaDB - PostgreSQL - SQLite - InfluxDB"
			elif [ "$3" == "monitoring" ] || [ "$3" == "Monitoring" ];then
					echo "=> htop - Munin - iptrafng"
			elif [ "$3" == "Editor" ] || [ "$3" == "editor" ] || \
				[ "$3" == "editors" ] || [ "$3" == "Editors" ];then
					echo "=> Vim - VScode"
			elif [ "$3" == "Massenger" ] || [ "$3" == "massenger" ];then
				echo "=> Telegram"
			elif [ "$3" == "Developer-Tools" ] || [ "$3" == "developer-tools" ] || \
				[ "$3" == "DeveloperTools" ] || [ "$3" == "developertools" ];then
					echo "=> ohmyzsh "
				       	echo "=> vscode - vim - vundle "
					echo "=> sshfs ( for Mount Server Directory to Your Local system)"
					echo "=> Docker - OpenStack - Terraform - puppet - Ansible"
					echo "=> Android-debug-bridge : The Android Debug Bridge is a programming tool used for the debugging of Android-based devices."
					echo "=> Git - mercurial"
					echo "=> Preparing the system for Python programming (check Developer Function)"
					echo "=> Nginx - Apache"
					echo "=> Tmux : It allows multiple terminal sessions to be accessed simultaneously in a single window. "
					echo "=> Picocom : s a minimal dumb-terminal emulation program that is great for accessing a serial port based Linux console"
					
			elif [ "$3" == "VPN" ] || [ "$3" == "vpn" ];then
					echo "=> openconnect"
					echo "=> openvpn"
			elif [ "$3" == "BasicTools" ] || [ "$3" == "basictools" ] || \
				 [ "$3" == "Basic-Tools" ] || [ "$3" == "BasicTools" ];then
				 	echo " => wget - curl - gcc - git -mercurial"
			else	
					echo "$yellow !!!  I did not understand the command you gave for my software list. $yellow !!! $reset"
					echo "Note :In the $green Future $reset,the man software will add your needs to the script."
			fi
		else
			echo "Did Your Mean --known?"
			echo "Edit command and Try Again"
		fi


	# Remover
	## The uninstaller tries to remove the software along with everything that was added during installation
	## For Exapmle Repositories
	## Finally, it will automatically run the clean_unneeded script

	elif [ "$1" == "--remove" ];then
		if [ "$2" == "mariadb" ] || [ "$2" == "mariaDB" ] || \
			[ "$2" == "MariaDB" ];then
				mariadb_remover
				
		elif [ "$2" == "postgresql" ] || [ "$2" == "PostgreSQL" ] || \
			[ "$2" == "postgreSQL" ];then
				postgre_remover
				 
		elif [ "$2" == "adb" ] || [ "$2" == "Android-Dubug-Bridge" ] || \
			[ "$2" == "ADB" ] || [ "$2" == "Android_Dubug_Bridge" ] || \
				[ "$2" == "android_dubug_bridge" ] || [ "$2" == "android-dubug-bridge" ] || \
					[ "$2" == "Android_Tools" ] || [ "$2" == "android_tools" ];then
							adb_remover
							
		
		elif [ "$2" == "vlc" ] || [ "$2" == "VLC" ];then 
				vlc_remover
				

		elif [ "$2" == "vscode" ] || [ "$2" == "code" ] || \
			[ "$2" == "VScode" ] || [ "$2" == "visual_stdio_code" ];then
				code_remover
				

		elif [ "$2" == "clamAV" ] || [ "$2" == "clamav" ];then
				clamav_remover
				
		elif [ "$2" == "git" ] || [ "$2" == "Git" ] || \
			[ "$2" == "GIT" ];then
				git_remover
				
		elif [ "$2" == "gcc" ] || [ "$2" == "GCC" ] || \
			[ "$2" == "Gcc" ];then
				gcc_remover
				
		elif [ "$2" == "zsh" ] || [ "$2" == "ZSH" ] || \
			[ "$2" == "Zsh" ];then
				zsh_remover
						
		
		elif [ "$2" == "Basic_Tools" ] || [ "$2" == "basic_tools" ] || \
			[ "$2" == "BasicTools" ] || [ "$2" == "basictools" ];then		
				basic_tools_remover
				
			
		elif [ "$2" == "ohmyzsh" ] || [ "$2" == "OhMyZsh" ] || \
			[ "$2" == "oh-my-zsh" ];then
				ohmyzsh_remover		
				

		elif [ "$2" == "command_line_tools" ] || [ "$2" == "Command_Line_Tools" ] || \
			[ "$2" == "CommandLineTools" ] || [ "$2" == "COMMAND_LINE_TOOLS" ];then
				command_line_tools_remover
				

		elif [ "$2" == "lshw" ] || [ "$2" == "lshardware" ] || \
			[ "$2" == "listhardware" ];then
				sudo zypper -n remove lshw
				
				
		elif [ "$2" == "openconnect" ] || [ "$2" == "open-connect" ] || \
			[ "$2" == "open_connect" ];then
				openconnect_remover
				
						
		elif [ "$2" == "openvpn" ] || [ "$2" == "open-vpn" ] || \
			[ "$2" == "OpenVpn" ];then
				openvpn_remover
				


		elif [ "$2" == "VIM" ] || [ "$2" == "Vim" ] || \
			[ "$2" == "vim" ];then
				
				vim_remover
				

		elif [ "$2" == "sqlite" ] || [ "$2" == "SQlite" ] || \
			[ "$2" == "SQLite" ];then
				sqlite_remover
				

		elif [ "$2" == "influx" ] || [ "$2" == "influxdb" ] || \
			[ "$2" == "InfluxDB" ];then
				influx_remover
				
						
		elif [ "$2" == "mongoDB" ] || [ "$2" == "mongo" ] || \
			[ "$2" == "MongoDB" ];then
				mongodb_remover
				
						
		elif [ "$2" == "nginx" ] || [ "$2" == "Nginx" ] || \
			[ "$2" == "NGINX" ];then
				nginx_remover
				
		
		elif [ "$2" == "Apache" ] || [ "$2" == "Apache2" ] || \
			[ "$2" == "apache" ] || [ "$2" == "apache2" ];then						
				apache_remover
				

		elif [ "$2" == "nmap" ] || [ "$2" == "Nmap" ] || \
			[ "$2" == "NMAP" ];then
				nmap_remover
				

		elif [ "$2" == "TcpDump" ] || [ "$2" == "tcpdump" ] || \
			[ "$2" == "TCPDUMP" ];then
				tcpdump_remover
				

		elif [ "$2" == "wireshark" ] || [ "$2" == "Wireshark" ] || \
			[ "$2" == "WireShark" ];then

				wireshark_remover
				

		elif [ "$2" == "iptraf" ] || [ "$2" == "iptraf-ng" ] || \
			[ "$2" == "iptrafng" ];then
				iptraf_remover
				

		elif [ "$2" == "network_tools_all" ] || [ "$2" == "Network_Tools_All" ] || \
			[ "$2" == "NetworkToolsAll" ] || [ "$2" == "nettoolsall" ];then
				network_tools_remover
				


		elif [ "$2" == "docker" ] || [ "$2" == "Docker" ] || \
			[ "$2" == "DOCKER" ];then
				docker_remover
				


		elif [ "$2" == "clamAV" ] || [ "$2" == "clamav" ] || \
			[ "$2" == "ClamAV" ];then
				clamav_remover
				

		elif [ "$2" == "maldet" ] || [ "$2" == "malware_detect" ] || \
			[ "$2" == "malware-detect" ] || [ "$2" == "Maldet" ] || \
				[ "$2" == "Malware-Detect" ] || [ "$2" == "LMD" ];then
					maldet_remover
					


		elif [ "$2" == "rkhunter" ] || [ "$2" == "Rkhunter" ] || \
			[ "$2" == "RootKitHunter" ] || [ "$2" == "rootkithunter" ];then
				rkhunter_remover
				

		elif [ "$2" == "lynis" ] || [ "$2" == "Lynis" ] || \
			[ "$2" == "LYNIS" ];then
				lynis_remover
				

		elif [ "$2" == "AV" ] || [ "$2" == "Antivirus" ] || \
			[ "$2" == "antivirus" ];then
				echo "$red This command will remove all antivirus packages from your system $reset"
				antivirus_remover
				

		elif [ "$2" == "fail2ban" ] || [ "$2" == "Fail2ban" ] || \
			[ "$2" == "FAIL2BAN" ];then
				fail2ban_remover
					


		elif [ "$2" == "tcpwrapper" ] || [ "$2" == "tcp-wrapper" ] || \
			[ "$2" == "TcpWrapper" ] || [ "$2" == "Tcp-Wrapper" ];then
				tcpwrapper_remover
				


		elif [ "$2" == "firewalld" ] || [ "$2" == "FirewallD" ] || \
			[ "$2" == "Firewall-Cmd" ] || [ "$2" == "firewall-cmd" ];then
				firewalld_remover
				

		elif [ "$2" == "psad" ] || [ "$2" == "PSad" ] || \
			[ "$2" == "PSAD" ];then
				psad_remover
				

		elif [ "$2" == "network_security" ] || [ "$2" == "Network_Securiey" ] || \
			[ "$2" == "NetworkSecurity" ];then
				network_security_remover
				

		elif [ "$2" == "openssh" ] || [ "$2" == "Openssh" ] || \
				[ "$2" == "Openssh-server" ] || [ "$2" == "openssh-server" ];then
					openssh_remover
					
		elif [ "$2" == "sshfs" ] || [ "$2" == "SSHFS" ] || \
				[ "$2" == "fuse-sshfs" ] || [ "$2" == "Fuse-SSHFS" ];then
					sshfs_remover
					

		elif [ "$2" == "usbguard" ] || [ "$2" == "USBGuard" ] || \
			[ "$2" == "usb-guard" ] || [ "$2" == "USB-Guard" ];then
				usbguard_remover
				

		elif [ "$2" == "jpegoptim" ] || [ "$2" == "jpgoptim" ] || \
			[ "$2" == "JpegOptim" ] || [ "$2" == "jpegoptimizer" ] || \
				[ "$2" == "jpgoptimizer" ];then
					jpgoptim_remover
					


		elif [ "$2" == "optimpng" ] || [ "$2" == "optipng" ] || \
			[ "$2" == "optimizepng" ] || [ "$2" == "optimizePNG" ];then
				optipng_remover
				

		elif [ "$2" == "exiftool" ] || [ "$2" == "Exif-Tool" ] || \
			[ "$2" == "ExifTool" ] || [ "$2" == "exiftools" ] || \
				[ "$2" == "ExifTools" ] || [ "$2" == "Exif-Tools" ];then
					exiftool_remover
					


		elif [ "$2" == "image-optimizer" ] || [ "$2" == "imageoptimizer" ] || \
			[ "$2" == "Image-Optmizer" ] || [ "$2" == "Image_Optmizer" ] || \
				[ "$2" == "image_optmizer" ];then
					image_optimizer_remover
					


		elif [ "$2" == "telegram" ] || [ "$2" == "Telegram-Desktop" ] || \
			[ "$2" == "Telegram" ] || [ "$2" == "telegram-desktop" ];then
				telegram_remover
				

		elif [ "$2" == "Ansible" ] || [ "$2" == "ansible" ] || \
			[ "$2" == "ANSIBLE" ];then
				ansible_remover
				

		elif [ "$2" == "tuned" ] || [ "$2" == "Tuned" ] || \
			[ "$2" == ""tuned ];then
				tuned_remover
				

		elif [ "$2" == "htop" ] || [ "$2" == "Htop" ];then
				htop_remover
				

		elif [ "$2" == "munin" ] || [ "$2" == "Munin" ];then
				munin_remover
				

		elif [ "$2" == "terraform" ] || [ "$2" == "Terraform" ] || \
			[ "$2" == "TERRAFORM" ];then
				terraform_remover
				

		elif [ "$2" == "develope" ] || [ "$2" == "Develope" ] || \
			[ "$2" == "DEVELOPE" ];then

				develope_remover
				

		elif [ "$2" == "openstack" ] || [ "$2" == "open-stack" ] || \
			[ "$2" == "OpenStack" ];then
				openstack_remover
				
		
		# Start of my own software section

		elif [ "$2" == "admin_fstep" ] || [ "$2" == "Admin_Fstep" ] || \
			[ "$2" == "AdminFstep" ] || [ "$2" == "Admin-Fstep" ];then
				admin_fstep_remover
				
		
		elif [ "$2" == "wpscan" ] || [ "$2" == "WpScan" ] || \
			[ "$2" == "wp-scan" ];then
				wpscan_remover
				


		elif [ "$2" == "kygnus_guard" ] || [ "$2" == "KYGnus_Guard" ] || \
			[ "$2" == "KYGnusGuard" ] || [ "$2" == "kygnusguard" ];then
				kygnus_guard	
				

		elif [ "$2" == "Android_Malware_Detect" ] || [ "$2" == "AndroidMalwareDetect" ] || \
				[ "$2" == "android_malware_detect" ] || [ "$2" == "AMD" ] || \
				[ "$2" == "amd" ];then
					true
					

		elif [ "$2" == "clone_disk" ] || [ "$2" == "CloneDisk" ] || \
			[ "$2" == "clone-disk" ] || [ "$2" == "clonedisk" ];then
				clone_disk_remover
				

		elif [ "$2" == "perm_check" ] || [ "$2" == "permcheck" ] || \
			[ "$2" == "PermCheck" ] || [ "$2" == "perm-check" ];then
				perm_check_remover
				


		elif [ "$2" == "LV" ] || [ "$2" == "LinuxVerification" ];then
				lv_remover
				


		elif [ "$2" == "fs" ] || [ "$2" == "FS" ];then
				fs_remover
				

		elif [ "$2" == "exifremover" ] || [ "$2" == "ExifRemover" ] || \
			[ "$2" == "exif_remover" ] || [ "$2" == "Exif_Remover" ];then
				exiremover_remover
				

		elif [ "$2" == "antideface" ] || [ "$2" == "AntiDeface" ] || \
			[ "$2" == "Anti-deface" ] || [ "$2" == "anti-deface" ];then
				antideface_remover
				
		
		elif [ "$2" == "mercurial" ] || [ "$2" == "Mercurial" ];then
				mercurial_remover
				


		elif [ "$2" == "tmux" ] || [ "$2" == "Tmux" ] || \
			[ "$2" == "Tmux" ];then
				tmux_remover
				

		elif [ "$2" == "picocom" ] || [ "$2" == "Picocom" ] || \
			[ "$2" == "PICOCOM" ];then
				picocom_remover
		else
				echo "Sorry.App Not Found in Repository"
		fi
		
	elif [ "$1" == "--remove" ];then
		if [ "$2" == "mariadb" ] || [ "$2" == "mariaDB" ] || \
			[ "$2" == "MariaDB" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					mariadb_remover
					remove_unneeded
				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "postgresql" ] || [ "$2" == "PostgreSQL" ] || \
			[ "$2" == "postgreSQL" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					postgre_remover
					remove_unneeded 
				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "adb" ] || [ "$2" == "Android-Dubug-Bridge" ] || \
			[ "$2" == "ADB" ] || [ "$2" == "Android_Dubug_Bridge" ] || \
				[ "$2" == "android_dubug_bridge" ] || [ "$2" == "android-dubug-bridge" ] || \
					[ "$2" == "Android_Tools" ] || [ "$2" == "android_tools" ];then
						if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
							adb_remover
							remove_unneeded
		
				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "vlc" ] || [ "$2" == "VLC" ];then 
			if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
				vlc_remover
				remove_unneeded

			else
				echo "Do you mean --unneed or --unneeded?"
				echo "check Check the spelling of the command and try again"
			fi
		elif [ "$2" == "vscode" ] || [ "$2" == "code" ] || \
			[ "$2" == "VScode" ] || [ "$2" == "visual_stdio_code" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					code_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "clamAV" ] || [ "$2" == "clamav" ];then
			if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
				clamav_remover
				remove_unneeded

			else
				echo "Do you mean --unneed or --unneeded?"
				echo "check Check the spelling of the command and try again"
			fi
		elif [ "$2" == "git" ] || [ "$2" == "Git" ] || \
			[ "$2" == "GIT" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					git_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "gcc" ] || [ "$2" == "GCC" ] || \
			[ "$2" == "Gcc" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					gcc_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "zsh" ] || [ "$2" == "ZSH" ] || \
			[ "$2" == "Zsh" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					zsh_remover
					remove_unneeded		
		
				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "Basic_Tools" ] || [ "$2" == "basic_tools" ] || \
			[ "$2" == "BasicTools" ] || [ "$2" == "basictools" ];then		
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					basic_tools_remover
					remove_unneeded
			
				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "ohmyzsh" ] || [ "$2" == "OhMyZsh" ] || \
			[ "$2" == "oh-my-zsh" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					ohmyzsh_remover		
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "command_line_tools" ] || [ "$2" == "Command_Line_Tools" ] || \
			[ "$2" == "CommandLineTools" ] || [ "$2" == "COMMAND_LINE_TOOLS" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					command_line_tools_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "lshw" ] || [ "$2" == "lshardware" ] || \
			[ "$2" == "listhardware" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					sudo zypper -n remove lshw
					remove_unneeded
				
				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "openconnect" ] || [ "$2" == "open-connect" ] || \
			[ "$2" == "open_connect" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					openconnect_remover
					remove_unneeded
						
				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "openvpn" ] || [ "$2" == "open-vpn" ] || \
			[ "$2" == "OpenVpn" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					openvpn_remover
					remove_unneeded


				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "VIM" ] || [ "$2" == "Vim" ] || \
			[ "$2" == "vim" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					vim_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "sqlite" ] || [ "$2" == "SQlite" ] || \
			[ "$2" == "SQLite" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					sqlite_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "influx" ] || [ "$2" == "influxdb" ] || \
			[ "$2" == "InfluxDB" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					influx_remover
					remove_unneeded
						
				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "mongoDB" ] || [ "$2" == "mongo" ] || \
			[ "$2" == "MongoDB" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					mongodb_remover
					remove_unneeded
						
				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "nginx" ] || [ "$2" == "Nginx" ] || \
			[ "$2" == "NGINX" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					nginx_remover
					remove_unneeded
		
				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "Apache" ] || [ "$2" == "Apache2" ] || \
			[ "$2" == "apache" ] || [ "$2" == "apache2" ];then						
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					apache_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "nmap" ] || [ "$2" == "Nmap" ] || \
			[ "$2" == "NMAP" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					nmap_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "TcpDump" ] || [ "$2" == "tcpdump" ] || \
			[ "$2" == "TCPDUMP" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					tcpdump_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "wireshark" ] || [ "$2" == "Wireshark" ] || \
			[ "$2" == "WireShark" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					wireshark_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "iptraf" ] || [ "$2" == "iptraf-ng" ] || \
			[ "$2" == "iptrafng" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					iptraf_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "network_tools_all" ] || [ "$2" == "Network_Tools_All" ] || \
			[ "$2" == "NetworkToolsAll" ] || [ "$2" == "nettoolsall" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					network_tools_remover
					remove_unneeded


				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "docker" ] || [ "$2" == "Docker" ] || \
			[ "$2" == "DOCKER" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					docker_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "clamAV" ] || [ "$2" == "clamav" ] || \
			[ "$2" == "ClamAV" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					clamav_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "maldet" ] || [ "$2" == "malware_detect" ] || \
			[ "$2" == "malware-detect" ] || [ "$2" == "Maldet" ] || \
				[ "$2" == "Malware-Detect" ] || [ "$2" == "LMD" ];then
						if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
							maldet_remover
							remove_unneeded

						else
							echo "Do you mean --unneed or --unneeded?"
							echo "check Check the spelling of the command and try again"
						fi
		elif [ "$2" == "rkhunter" ] || [ "$2" == "Rkhunter" ] || \
			[ "$2" == "RootKitHunter" ] || [ "$2" == "rootkithunter" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					rkhunter_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "lynis" ] || [ "$2" == "Lynis" ] || \
			[ "$2" == "LYNIS" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					lynis_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "AV" ] || [ "$2" == "Antivirus" ] || \
			[ "$2" == "antivirus" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					echo "$red This command will remove all antivirus packages from your system $reset"
					antivirus_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "fail2ban" ] || [ "$2" == "Fail2ban" ] || \
			[ "$2" == "FAIL2BAN" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					fail2ban_remover
					remove_unneeded	


				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "tcpwrapper" ] || [ "$2" == "tcp-wrapper" ] || \
			[ "$2" == "TcpWrapper" ] || [ "$2" == "Tcp-Wrapper" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					tcpwrapper_remover
					remove_unneeded


				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "firewalld" ] || [ "$2" == "FirewallD" ] || \
			[ "$2" == "Firewall-Cmd" ] || [ "$2" == "firewall-cmd" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					firewalld_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "psad" ] || [ "$2" == "PSad" ] || \
			[ "$2" == "PSAD" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					psad_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "network_security" ] || [ "$2" == "Network_Securiey" ] || \
			[ "$2" == "NetworkSecurity" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					network_security_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "openssh" ] || [ "$2" == "Openssh" ] || \
				[ "$2" == "Openssh-server" ] || [ "$2" == "openssh-server" ];then
					if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
						openssh_remover
						remove_unneeded
					else
						echo "Do you mean --unneed or --unneeded?"
						echo "check Check the spelling of the command and try again"
					fi
		elif [ "$2" == "sshfs" ] || [ "$2" == "SSHFS" ] || \
				[ "$2" == "fuse-sshfs" ] || [ "$2" == "Fuse-SSHFS" ];then
						if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
							sshfs_remover
							remove_unneeded

						else
							echo "Do you mean --unneed or --unneeded?"
							echo "check Check the spelling of the command and try again"
						fi
		elif [ "$2" == "usbguard" ] || [ "$2" == "USBGuard" ] || \
			[ "$2" == "usb-guard" ] || [ "$2" == "USB-Guard" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					usbguard_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "jpegoptim" ] || [ "$2" == "jpgoptim" ] || \
			[ "$2" == "JpegOptim" ] || [ "$2" == "jpegoptimizer" ] || \
				[ "$2" == "jpgoptimizer" ];then
						if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
							jpgoptim_remover
							remove_unneeded

						else
							echo "Do you mean --unneed or --unneeded?"
							echo "check Check the spelling of the command and try again"
						fi

		elif [ "$2" == "optimpng" ] || [ "$2" == "optipng" ] || \
			[ "$2" == "optimizepng" ] || [ "$2" == "optimizePNG" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					optipng_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "exiftool" ] || [ "$2" == "Exif-Tool" ] || \
			[ "$2" == "ExifTool" ] || [ "$2" == "exiftools" ] || \
				[ "$2" == "ExifTools" ] || [ "$2" == "Exif-Tools" ];then
						if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
							exiftool_remover
							remove_unneeded

						else
							echo "Do you mean --unneed or --unneeded?"
							echo "check Check the spelling of the command and try again"
						fi

		elif [ "$2" == "image-optimizer" ] || [ "$2" == "imageoptimizer" ] || \
			[ "$2" == "Image-Optmizer" ] || [ "$2" == "Image_Optmizer" ] || \
				[ "$2" == "image_optmizer" ];then
						if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
							image_optimizer_remover
							remove_unneeded


						else
							echo "Do you mean --unneed or --unneeded?"
							echo "check Check the spelling of the command and try again"
						fi
		elif [ "$2" == "telegram" ] || [ "$2" == "Telegram-Desktop" ] || \
			[ "$2" == "Telegram" ] || [ "$2" == "telegram-desktop" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					telegram_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "Ansible" ] || [ "$2" == "ansible" ] || \
			[ "$2" == "ANSIBLE" ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then

					ansible_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "tuned" ] || [ "$2" == "Tuned" ] || \
			[ "$2" == ""tuned ];then
				if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
					tuned_remover
					remove_unneeded

				else
					echo "Do you mean --unneed or --unneeded?"
					echo "check Check the spelling of the command and try again"
				fi
		elif [ "$2" == "htop" ] || [ "$2" == "Htop" ];then
			if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
				htop_remover
				remove_unneeded

			else
				echo "Do you mean --unneed or --unneeded?"
				echo "check Check the spelling of the command and try again"
			fi
		elif [ "$2" == "munin" ] || [ "$2" == "Munin" ];then
			if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
				munin_remover
				remove_unneeded

			else
				echo "Do you mean --unneed or --unneeded?"
				echo "check Check the spelling of the command and try again"
			fi
		elif [ "$2" == "terraform" ] || [ "$2" == "Terraform" ] || \
			[ "$2" == "TERRAFORM" ];then
					if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
						terraform_remover
						remove_unneeded

					else
						echo "Do you mean --unneed or --unneeded?"
						echo "check Check the spelling of the command and try again"
					fi
		elif [ "$2" == "develope" ] || [ "$2" == "Develope" ] || \
			[ "$2" == "DEVELOPE" ];then
					if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then

						develope_remover
						remove_unneeded

					else
						echo "Do you mean --unneed or --unneeded?"
						echo "check Check the spelling of the command and try again"
					fi
		elif [ "$2" == "openstack" ] || [ "$2" == "open-stack" ] || \
			[ "$2" == "OpenStack" ];then
					if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
						openstack_remover
						remove_unneeded
		
					else
						echo "Do you mean --unneed or --unneeded?"
						echo "check Check the spelling of the command and try again"
					fi
		# Start of my own software section

		elif [ "$2" == "admin_fstep" ] || [ "$2" == "Admin_Fstep" ] || \
			[ "$2" == "AdminFstep" ] || [ "$2" == "Admin-Fstep" ];then
					if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
						admin_fstep_remover
						remove_unneeded
		
					else
						echo "Do you mean --unneed or --unneeded?"
						echo "check Check the spelling of the command and try again"
					fi
		elif [ "$2" == "wpscan" ] || [ "$2" == "WpScan" ] || \
			[ "$2" == "wp-scan" ];then
					if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
						wpscan_remover
						remove_unneeded


					else
						echo "Do you mean --unneed or --unneeded?"
						echo "check Check the spelling of the command and try again"
					fi
		elif [ "$2" == "kygnus_guard" ] || [ "$2" == "KYGnus_Guard" ] || \
			[ "$2" == "KYGnusGuard" ] || [ "$2" == "kygnusguard" ];then
					if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
						kygnus_guard	
						remove_unneeded

					else
						echo "Do you mean --unneed or --unneeded?"
						echo "check Check the spelling of the command and try again"
					fi
		elif [ "$2" == "Android_Malware_Detect" ] || [ "$2" == "AndroidMalwareDetect" ] || \
				[ "$2" == "android_malware_detect" ] || [ "$2" == "AMD" ] || \
				[ "$2" == "amd" ];then
						if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
							true
							#remove_unneeded

						else
							echo "Do you mean --unneed or --unneeded?"
							echo "check Check the spelling of the command and try again"
						fi
		elif [ "$2" == "clone_disk" ] || [ "$2" == "CloneDisk" ] || \
			[ "$2" == "clone-disk" ] || [ "$2" == "clonedisk" ];then
					if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
						clone_disk_remover
						remove_unneeded

					else
						echo "Do you mean --unneed or --unneeded?"
						echo "check Check the spelling of the command and try again"
					fi
		elif [ "$2" == "perm_check" ] || [ "$2" == "permcheck" ] || \
			[ "$2" == "PermCheck" ] || [ "$2" == "perm-check" ];then
					if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
						perm_check_remover
						remove_unneeded


					else
						echo "Do you mean --unneed or --unneeded?"
						echo "check Check the spelling of the command and try again"
					fi
		elif [ "$2" == "LV" ] || [ "$2" == "LinuxVerification" ];then
			if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
				lv_remover
				remove_unneeded

			else
				echo "Do you mean --unneed or --unneeded?"
				echo "check Check the spelling of the command and try again"
			fi

		elif [ "$2" == "fs" ] || [ "$2" == "FS" ];then
			if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
				fs_remover
				remove_unneeded

			else
				echo "Do you mean --unneed or --unneeded?"
				echo "check Check the spelling of the command and try again"
			fi
		elif [ "$2" == "exifremover" ] || [ "$2" == "ExifRemover" ] || \
			[ "$2" == "exif_remover" ] || [ "$2" == "Exif_Remover" ];then
					if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
						exiremover_remover
						remove_unneeded

					else
						echo "Do you mean --unneed or --unneeded?"
						echo "check Check the spelling of the command and try again"
					fi
		elif [ "$2" == "antideface" ] || [ "$2" == "AntiDeface" ] || \
			[ "$2" == "Anti-deface" ] || [ "$2" == "anti-deface" ];then
					if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
						antideface_remover
						remove_unneeded
		
					else
						echo "Do you mean --unneed or --unneeded?"
						echo "check Check the spelling of the command and try again"
					fi
		elif [ "$2" == "mercurial" ] || [ "$2" == "Mercurial" ];then
			if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
				mercurial_remover
				remove_unneeded


			else
				echo "Do you mean --unneed or --unneeded?"
				echo "check Check the spelling of the command and try again"
			fi
		elif [ "$2" == "tmux" ] || [ "$2" == "Tmux" ] || \
			[ "$2" == "Tmux" ];then
					if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
						tmux_remover
						remove_unneeded

					else
						echo "Do you mean --unneed or --unneeded?"
						echo "check Check the spelling of the command and try again"
					fi
		elif [ "$2" == "picocom" ] || [ "$2" == "Picocom" ] || \
			[ "$2" == "PICOCOM" ];then
					if [ "$3" == "--unneed" ] || [ "$3" == "--unneeded" ];then
						picocom_remover
						remove_unneeded
					else
						echo "Do you mean --unneed or --unneeded?"
						echo "check Check the spelling of the command and try again"
					fi
		else
				echo "Sorry.App Not Found in Repository"
		fi
		
	elif [ "$1" == "--document" ];then
		if [ "$2" == "Apache2" ] || [ "$2" == "apache" ];then
			echo "=> https://doc.opensuse.org/documentation/leap/reference/html/book-reference/cha-apache2.html"
		elif [ "$2" == "nginx" ];then
			echo "=> https://www.osradar.com/how-to-install-nginx-on-opensuse-suse-15/"
		elif [ "$2" == "clamav" ];then
			echo "=> https://en.opensuse.org/ClamAV"
			echo "=> https://linuxhint.com/install_clamav_ubuntu/"
			echo "=> https://github.com/KooshaYeganeh/OpenSuse4Developers#clamav"
		elif [ "$2" == "tuned" ] || [ "$2" == "Tuned" ];then
			echo "=> https://doc.opensuse.org/documentation/leap/tuning/single-html/book-tuning/"
			echo "=> https://www.redhat.com/en/blog/tuning-your-system-tuned"
			echo "=> https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/monitoring_and_managing_system_status_and_performance/getting-started-with-tuned_monitoring-and-managing-system-status-and-performance"
		elif [ "$2" == "openstack" ] || [ "$2" == "open_stack" ] || [ "$2" == "OpenStack" ] || [ "$2" == "Open_Stack" ];then
			echo "=> https://docs.openstack.org/mitaka/install-guide-obs/"
		elif [ "$2" == "firewalld" ] || [ "$2" == "FirewallD" ] || \
			[ "$2" == "iptables" ] || [ "$2" == "Iptables" ];then
				echo "=> https://www.unixmen.com/iptables-vs-firewalld/"
				echo "=> https://kooshayeganeh.gitbook.io/iptables/"
				echo "=> https://kooshayeganeh.gitbook.io/firewalld/"
		elif [ "$2" == "mysql" ] || [ "$2" == "mariaDB" ] || [ "$2" == "MariaDB" ];then
				echo "=> https://linuxhint.com/backup-mysql-database-using-mysqldump/"
				echo "=> https://kooshayeganeh.gitbook.io/mariadb-handbooks/"
		elif [ "$2" == "SQlite" ] || [ "$2" == "sqlite" ] || [ "$2" == "SQLite" ];then
				echo "=> https://www.sqlitetutorial.net/sqlite-sample-database/"
		elif [ "$2" == "tcpdump" ] || [ "$2" == "Tcpdump" ];then
				echo "=> https://linuxize.com/post/tcpdump-command-in-linux/"
				echo "=> https://danielmiessler.com/study/tcpdump/"
		elif [ "$2" == "nmap" ] || [ "$2" == "Nmap" ];then
				echo "=> https://phoenixnap.com/kb/nmap-commands"
		elif [ "$2" == "tcpwrapper" ] || [ "$2" == "Tcpwrapper" ] || \
			[ "$2" == "tcpd" ] || [ "$2" == "tcpwrapper" ] || [ "$2" == "TcpWrapper" ];then
				echo "=> https://www.tecmint.com/secure-linux-tcp-wrappers-hosts-allow-deny-restrict-access/"
				echo "=> https://ostechnix.com/restrict-access-linux-servers-using-tcp-wrappers/"
		elif [ "$2" == "usbguard" ] || [ "$2" == "USBguard" ] || [ "$2" == "USBGuard" ];then
				echo "=> https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/sec-using-usbguard"
		elif [ "$2" == "psad" ] || [ "$2" == "Psad" ];then
				echo "=> https://www.digitalocean.com/community/tutorials/how-to-use-psad-to-detect-network-intrusion-attempts-on-an-ubuntu-vps"
		elif [ "$2" == "Docker" ] || [ "$2" == "docker" ];then	
				echo "=> https://www.digitalocean.com/community/tutorial_collections/how-to-install-and-use-docker"
				echo "=> https://kooshayeganeh.gitbook.io/docker/"
		elif [ "$2" == "Ansible" ] || [ "$2" == "ansible" ];then
				echo "=> https://www.redhat.com/en/technologies/management/ansible/what-is-ansible"
				echo "=> https://www.digitalocean.com/community/cheatsheets/how-to-use-ansible-cheat-sheet-guide"
		elif [ "$2" == "vim" ] || [ "$2" == "Vim" ];then
				echo "=> https://kooshayeganeh.gitbook.io/vim/"
		elif [ "$2" == "git" ] || [ "$2" == "Git" ];then
				echo "=> https://kooshayeganeh.gitbook.io/git/"
		elif [ "$2" == "SeLinux" ] || [ "$2" == "selinux" ];then
				echo "=> https://kooshayeganeh.gitbook.io/selinux/"
		fi


	# INSTALL Block
	
	
	elif [ "$1" == "--install" ];then
		if [ "$2" == "android_debug_bridge" ] || [ "$2" == "adb" ] || \
			[ "$2" == "Android_Debug_Bridge" ] || [ "$2" == "ADB" ];then
				android_debug_bridge
		elif [ "$2" == "vlc" ] || [ "$2" == "VLC" ];then
			vlc

		elif [ "$2" == "mariadb" ] || [ "$2" == "mariaDB" ] || [ "$2" ==  "MariaDB" ];then
			mariadb

		elif [ "$2" == "posgresql" ] || [ "$2" == "postgreSQL" ] || [ "$2" ==  "Postgresql" ] || \
				[ "$2" == "PostgreSQL" ];then
					postgreSQL_Installler
		elif [ "$2" == "code" ] || [ "$2" == "vscode" ] || [ "$2" ==  "VSCODE" ] || \
				[ "$2" == "VScode" ] || [ "$2" == "visual_stdio_code" ];then
					vscode
		elif [ "$2" == "codec" ] || [ "$2" == "CODEC" ] || \
			[ "$2" == "multimedia_codec" ] || [ "$2" == "MultiMedia_Codec" ];then
				mediacodec
		elif [ "$2" == "git" ] || [ "$2" == "Git" ] || \
			[ "$2" == "GIT" ];then
				git
		
		elif [ "$2" == "mercurial" ] || [ "$2" == "Mercurial" ];then
				mercurial

		elif [ "$2" == "gcc" ] || [ "$2" == "GCC" ] || \
			[ "$2" == "Gcc" ];then
					gcc
		elif [ "$2" == "zsh" ] || [ "$2" == "ZSH" ] || \
			[ "$2" == "Zsh" ];then
					zsh		
		
		elif [ "$2" == "Basic_Tools" ] || [ "$2" == "basic_tools" ] || \
			[ "$2" == "BasicTools" ] || [ "$2" == "basictools" ];then		
				Basic_tools
			
		elif [ "$2" == "ohmyzsh" ] || [ "$2" == "OhMyZsh" ] || \
			[ "$2" == "oh-my-zsh" ];then
					ohmyzsh			

		elif [ "$2" == "command_line_tools" ] || [ "$2" == "Command_Line_Tools" ] || \
			[ "$2" == "CommandLineTools" ] || [ "$2" == "COMMAND_LINE_TOOLS" ];then
					command_line_tools
		
		elif [ "$2" == "lshw" ] || [ "$2" == "lshardware" ] || \
			[ "$2" == "listhardware" ];then
				lshardware
		
		elif [ "$2" == "openconnect" ] || [ "$2" == "open-connect" ] || \
			[ "$2" == "open_connect" ];then
					openconnect
						
		elif [ "$2" == "openvpn" ] || [ "$2" == "open-vpn" ] || \
			[ "$2" == "OpenVpn" ];then
					openvpn
		elif [ "$2" == "VIM" ] || [ "$2" == "Vim" ] || \
			[ "$2" == "vim" ];then
					vim
		
		elif [ "$2" == "sqlite" ] || [ "$2" == "SQlite" ] || \
			[ "$2" == "SQLite" ];then
				sqlite
						
		elif [ "$2" == "influx" ] || [ "$2" == "influxdb" ] || \
			[ "$2" == "InfluxDB" ];then
				influx
						
		elif [ "$2" == "mongoDB" ] || [ "$2" == "mongo" ] || \
			[ "$2" == "MongoDB" ];then
					mongodb
						
		elif [ "$2" == "nginx" ] || [ "$2" == "Nginx" ] || \
			[ "$2" == "NGINX" ];then
					nginx
		
		elif [ "$2" == "Apache" ] || [ "$2" == "Apache2" ] || \
			[ "$2" == "apache" ] || [ "$2" == "apache2" ];then						
					apache


		elif [ "$2" == "nmap" ] || [ "$2" == "Nmap" ] || \
			[ "$2" == "NMAP" ];then
					nmap

		elif [ "$2" == "TcpDump" ] || [ "$2" == "tcpdump" ] || \
			[ "$2" == "TCPDUMP" ];then
					tcpdump

		elif [ "$2" == "wireshark" ] || [ "$2" == "Wireshark" ] || \
			[ "$2" == "WireShark" ];then

				wireshark

		elif [ "$2" == "iptraf" ] || [ "$2" == "iptraf-ng" ] || \
			[ "$2" == "iptrafng" ];then
					iptraf

		elif [ "$2" == "network_tools_all" ] || [ "$2" == "Network_Tools_All" ] || \
			[ "$2" == "NetworkToolsAll" ] || [ "$2" == "nettoolsall" ];then
				network_tools


		elif [ "$2" == "docker" ] || [ "$2" == "Docker" ] || \
			[ "$2" == "DOCKER" ];then
					docker


		elif [ "$2" == "clamAV" ] || [ "$2" == "clamav" ] || \
			[ "$2" == "ClamAV" ];then
					clamav

		elif [ "$2" == "maldet" ] || [ "$2" == "malware_detect" ] || \
			[ "$2" == "malware-detect" ] || [ "$2" == "Maldet" ] || \
				[ "$2" == "Malware-Detect" ] || [ "$2" == "LMD" ];then
						maldet


		elif [ "$2" == "rkhunter" ] || [ "$2" == "Rkhunter" ] || \
			[ "$2" == "RootKitHunter" ] || [ "$2" == "rootkithunter" ];then
					rkhunter

		elif [ "$2" == "lynis" ] || [ "$2" == "Lynis" ] || \
			[ "$2" == "LYNIS" ];then
					lynis

		elif [ "$2" == "AV" ] || [ "$2" == "Antivirus" ] || \
			[ "$2" == "antivirus" ];then
					antivirus

		elif [ "$2" == "fail2ban" ] || [ "$2" == "Fail2ban" ] || \
			[ "$2" == "FAIL2BAN" ];then
					fail2ban


		elif [ "$2" == "tcpwrapper" ] || [ "$2" == "tcp-wrapper" ] || \
			[ "$2" == "TcpWrapper" ] || [ "$2" == "Tcp-Wrapper" ];then
					tcpwrapper


		elif [ "$2" == "firewalld" ] || [ "$2" == "FirewallD" ] || \
			[ "$2" == "Firewall-Cmd" ] || [ "$2" == "firewall-cmd" ];then
					firewalld
		elif [ "$2" == "psad" ] || [ "$2" == "PSad" ] || \
			[ "$2" == "PSAD" ];then
				psad

		elif [ "$2" == "network_security" ] || [ "$2" == "Network_Securiey" ] || \
			[ "$2" == "NetworkSecurity" ];then
				network_security
		
		elif [ "$2" == "apache_waf" ] || [ "$2" == "Apache_Waf" ] || \
				[ "$2" == "Apache2_Waf" ] || [ "$2" == "apache2_waf" ] || \
					[ "$2" == "Apache2Waf" ] || [ "$2" == "apache2waf" ] ;then
							apache_waf

		elif [ "$2" == "Nginx_Waf" ] || [ "$2" == "nginx_waf" ] || \
				[ "$2" == "Nginx-waf" ] || [ "$2" == "Nginx-Waf" ] || \
					[ "$2" == "NginxWaf" ] || [ "$2" == "nginxwaf" ];then
							nginx_waf

		elif [ "$2" == "openssh" ] || [ "$2" == "Openssh" ] || \
				[ "$2" == "Openssh-server" ] || [ "$2" == "openssh-server" ];then
					openssh
		elif [ "$2" == "sshfs" ] || [ "$2" == "SSHFS" ] || \
				[ "$2" == "fuse-sshfs" ] || [ "$2" == "Fuse-SSHFS" ];then
						sshfs
		elif [ "$2" == "usbguard" ] || [ "$2" == "USBGuard" ] || \
			[ "$2" == "usb-guard" ] || [ "$2" == "USB-Guard" ];then
				usbguard

		elif [ "$2" == "jpegoptim" ] || [ "$2" == "jpgoptim" ] || \
			[ "$2" == "JpegOptim" ] || [ "$2" == "jpegoptimizer" ] || \
				[ "$2" == "jpgoptimizer" ];then
					jpg

		elif [ "$2" == "optimpng" ] || [ "$2" == "optipng" ] || \
			[ "$2" == "optimizepng" ] || [ "$2" == "optimizePNG" ];then
					png

		elif [ "$2" == "exiftool" ] || [ "$2" == "ExifTool" ] || \
			[ "$2" == "ExifTools" ] || [ "$2" == "exiftools" ] || \
				[ "$2" == "Exif-Tools" ] || [ "$2" == "exif-tools" ];then
					exiftool


		elif [ "$2" == "image-optimizer" ] || [ "$2" == "imageoptimizer" ] || \
			[ "$2" == "Image-Optmizer" ] || [ "$2" == "Image_Optmizer" ] || \
				[ "$2" == "image_optmizer" ];then
					image_optimizer


		elif [ "$2" == "telegram" ] || [ "$2" == "Telegram-Desktop" ] || \
			[ "$2" == "Telegram" ] || [ "$2" == "telegram-desktop" ];then
				telegram

		elif [ "$2" == "Ansible" ] || [ "$2" == "ansible" ] || \
			[ "$2" == "ANSIBLE" ];then
				ansible

		elif [ "$2" == "tuned" ] || [ "$2" == "Tuned" ] || \
			[ "$2" == ""tuned ];then
				tuned

		elif [ "$2" == "htop" ] || [ "$2" == "Htop" ];then
				htop

		elif [ "$2" == "munin" ] || [ "$2" == "Munin" ];then
				munin

		elif [ "$2" == "terraform" ] || [ "$2" == "Terraform" ] || \
			[ "$2" == "TERRAFORM" ];then
				terraform

		elif [ "$2" == "develope" ] || [ "$2" == "Develope" ] || \
			[ "$2" == "DEVELOPE" ];then

				develope

		elif [ "$2" == "openstack" ] || [ "$2" == "open-stack" ] || \
			[ "$2" == "OpenStack" ];then
				openstack
		# Start of my own software section

		elif [ "$2" == "admin_fstep" ] || [ "$2" == "Admin_Fstep" ] || \
			[ "$2" == "AdminFstep" ] || [ "$2" == "Admin-Fstep" ];then

				admin_fstep
		
		elif [ "$2" == "wpscan" ] || [ "$2" == "WpScan" ] || \
			[ "$2" == "wp-scan" ];then
				wpscan
				


		elif [ "$2" == "kygnus_guard" ] || [ "$2" == "KYGnus_Guard" ] || \
			[ "$2" == "KYGnusGuard" ] || [ "$2" == "kygnusguard" ];then
					
					kygnus_guard

		elif [ "$2" == "Android_Malware_Detect" ] || [ "$2" == "AndroidMalwareDetect" ] || \
				[ "$2" == "android_malware_detect" ] || [ "$2" == "AMD" ] || \
				[ "$2" == "amd" ];then
					Android_Malware_Detect
					

		elif [ "$2" == "clone_disk" ] || [ "$2" == "CloneDisk" ] || \
			[ "$2" == "clone-disk" ] || [ "$2" == "clonedisk" ];then
					clone_disk
					

		elif [ "$2" == "perm_check" ] || [ "$2" == "permcheck" ] || \
			[ "$2" == "PermCheck" ] || [ "$2" == "perm-check" ];then
					perm_check
				


		elif [ "$2" == "LV" ] || [ "$2" == "LinuxVerification" ];then
				lv
				

		elif [ "$2" == "fs" ] || [ "$2" == "FS" ];then
				fs
				

		elif [ "$2" == "exifremover" ] || [ "$2" == "ExifRemover" ] || \
			[ "$2" == "exif_remover" ] || [ "$2" == "Exif_Remover" ];then
				exifremover
				

		elif [ "$2" == "antideface" ] || [ "$2" == "AntiDeface" ] || \
			[ "$2" == "Anti-deface" ] || [ "$2" == "anti-deface" ];then
				antideface
				
		elif [ "$2" == "tmux" ] || [ "$2" == "Tmux" ] || \
			[ "$2" == "Tmux" ];then
				tmux

		elif [ "$2" == "picocom" ] || [ "$2" == "Picocom" ] || \
			[ "$2" == "PICOCOM" ];then
				picocom

		elif [ "$2" == "v" ] || [ "$2" == "vlang" ] || \
			[ "$2" == "V" ] || [ "$2" == "VLANG" ];then
				vlang
		else
				echo "Sorry.App Not Found in Repository"
		fi

	else
		echo "I Can't Understand What You Want."
		echo "You should have entered the install command Please tyr Again with --install"
	fi
else
	echo "Do you mean suse?"
	
fi
